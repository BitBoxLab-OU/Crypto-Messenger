<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EncryptedMessaging</name>
    </assembly>
    <members>
        <member name="T:EncryptedMessaging.Bytes">
            <summary>
            This class is used for combining and converting Byte array based on the input.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Bytes.Combine(System.Byte[],System.Byte[][])">
            <summary>
            Combines the byte array with the item in the element 
            </summary>
            <param name="me">Byte</param>
            <param name="element">Array</param>
            <returns>First</returns>
        </member>
        <member name="M:EncryptedMessaging.Bytes.Combine(System.Byte[],System.Byte[])">
            <summary>
            Combines the Byte wuth Byte array.
            </summary>
            <param name="me">Byte</param>
            <param name="byteArray"> Byte array </param>
            <returns>Byte</returns>
        </member>
        <member name="M:EncryptedMessaging.Bytes.Take(System.Byte[],System.Int32)">
            <summary>
            Convert and copy byte array to a numeric representation.
            </summary>
            <param name="source">Byte source</param>
            <param name="length">numeric value</param>
            <returns>Byte length</returns>
        </member>
        <member name="M:EncryptedMessaging.Bytes.Skyp(System.Byte[],System.Int32)">
            <summary>
            Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.
            </summary>
            <param name="source">Source array</param>
            <param name="offset">range</param>
            <returns>Result</returns>
        </member>
        <member name="M:EncryptedMessaging.Bytes.SequenceEqual(System.Byte[],System.Byte[])">
            <summary>
            Compare the source byte array with the length.
            </summary>
            <param name="source">source byte array</param>
            <param name="compareTo"> byte array </param>
            <returns>Boolean</returns>
        </member>
        <member name="M:EncryptedMessaging.Bytes.GetBytes(System.Int32)">
            <summary>
            Returns the specified integer value as an array of bytes.		
            </summary>
            <param name="value">integer</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:EncryptedMessaging.Bytes.GetBytes(System.UInt32)">
            <summary>
            Returns the specified unsigned integer value as an array of bytes.
            </summary>
            <param name="value">unsigned integer</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:EncryptedMessaging.Bytes.GetBytes(System.Int64)">
            <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value"> 64-bit signed integer</param>
            <returns>>Byte array</returns>
        </member>
        <member name="M:EncryptedMessaging.Bytes.GetBytes(System.UInt64)">
            <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value"> 64-bit unsigned integer</param>
            <returns>>Byte array</returns>
        </member>
        <member name="M:EncryptedMessaging.ICloudManager.SaveDataOnCloud(System.String,System.String,System.Byte[],System.Boolean)">
            <summary>
            Save a data to the cloud in a set type, with a name key
            </summary>
            <param name="type">The group to which the data belongs</param>
            <param name="name">The unique key assigned to the object</param>
            <param name="data">An array of data to save </param>
            <param name="shared">If true, save the data in a common area among all contacts, otherwise they will be saved in a private area accessible only to the current user</param>
        </member>
        <member name="M:EncryptedMessaging.ICloudManager.LoadDataFromCloud(System.String,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Sends a previously saved data request command, and if it exists an event will be generated OnDataLoad
            </summary>
            <param name="type">The group to which the data belongs</param>
            <param name="name">The unique key assigned to the object</param>
            <param name="ifSizeIsDifferent">Upload the data only if the size has changed (It is an empirical method to avoid creating communication traffic for data we already have, it would be more correct to use a hash, but this creates a computational load on the cloud)</param>
            <param name="shared">If true, load the data from a common area among all contacts, otherwise they will be load from a private area accessible only to the current user</param>
        </member>
        <member name="M:EncryptedMessaging.ICloudManager.LoadAllDataFromCloud(System.String,System.Boolean)">
            <summary>
            Upload from the cloud all the data saved in a specific type group. An event OnDataLoad will be generated for each data
            </summary>
            <param name="type">The group to which the data belongs</param>
            <param name="shared">If true, load the data from a common area among all contacts, otherwise they will be load from a private area accessible only to the current user</param>
        </member>
        <member name="M:EncryptedMessaging.ICloudManager.DeleteDataOnCloud(System.String,System.String,System.Boolean)">
            <summary>
            Delete a data that has been saved on the cloud
            </summary>
            <param name="type">The group to which the data belongs</param>
            <param name="name">The unique key assigned to the object</param>
            <param name="shared">If true, an object in the common area will be deleted, otherwise an object will be deleted from the private area accessible only to the current user</param>
        </member>
        <member name="M:EncryptedMessaging.ICloudManager.SendPushNotification(System.String,System.UInt64,System.Boolean,System.String)">
            <summary>
            Send push notifications on the ios network via our open source cloud system
            </summary>
            <param name="deviceToken">IOS device Token</param>
            <param name="chatId">ChatId</param>
            <param name="isVideo">Is video</param>
            <param name="contactNameOrigin">Name of contact to generate a notification</param>
        </member>
        <member name="M:EncryptedMessaging.ICloudManager.OnCommand(System.UInt16,System.Byte[][])">
            <summary>
            It works like an event. It is generated when something is received from the cloud
            </summary>
            <param name="command">Command</param>
            <param name="parameters">Parameters</param>
        </member>
        <member name="T:EncryptedMessaging.Contact">
            <summary>
            This class contains all the functionalities related to contact features.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Contact.#ctor(EncryptedMessaging.Context,System.Collections.Generic.List{System.Byte[]},System.String,System.String,EncryptedMessaging.Contact.RuntimePlatform,System.String,System.String,System.Boolean)">
            <summary>
            Checks if the chat initiated is between a single user or multiple partipants/group. 
            </summary>
            <param name="context">Context</param>
            <param name="participants">Users in the contacts</param>
            <param name="name">Name of the user</param>
            <param name="language">Application language</param>
            <param name="os">Operating system</param>
            <param name="firebaseToken">Token Firebase</param>
            <param name="deviceToken">Device Token of iOS</param>
            <param name="isServer">Is a server</param>
        </member>
        <member name="F:EncryptedMessaging.Contact.Session">
            <summary>
            It can be used by server applications to store data relating to this contact during a session. When the session expires, the Contact object is deleted and the session data will be deleted (the concept is similar to web application session data)
            </summary>
        </member>
        <member name="E:EncryptedMessaging.Contact.PropertyChanged">
            <summary>
            Represents the method that will handle the proporty changed event raised when a property when a property is changed on a component.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Contact.GetRealName">
            <summary>
            Get the contact's real name (if set), otherwise return null
            </summary>
            <returns>Contact's real name if set</returns>
        </member>
        <member name="P:EncryptedMessaging.Contact.Name">
            <summary>
            Get the contact's name (if set), otherwise return null.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.MyRemoteName">
            <summary>
            The name of my contact registered on the recipient's device
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.LightColor">
            <summary>
            Represents an ARGB (alpha, red, green, blue) color.
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.DarkColor">
            <summary>
            Represents an ARGB (alpha, red, green, blue) color.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.LightColorAsHex">
            <summary>
            Convert color to hex.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.DarkColorAsHex">
            <summary>
            Convert color to hex.
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.Language">
            <summary>
            Language used for this contact.
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.Os">
            <summary>
            Operating system in use for runtime application.
            </summary>
        </member>
        <member name="T:EncryptedMessaging.Contact.RuntimePlatform">
            <summary>
            Base class for the runtime platform.
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.RuntimePlatform.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.RuntimePlatform.Android">
            <summary>
            Andriod
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.RuntimePlatform.iOS">
             <summary>
            IOS 
             </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.RuntimePlatform.Windows">
            <summary>
            Windows
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.RuntimePlatform.UWP">
            <summary>
            Universal windows platform
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.RuntimePlatform.Unix">
            <summary>
            Unix
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.RuntimePlatform.Mac">
            <summary>
            Macintosh
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Contact.Pseudonym">
            <summary>
            Set assumed Pseudonyms for the participants in the group.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EncryptedMessaging.Contact.PublicKeys">
            <summary>
            Check if public key exists
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Contact.ReadPosts(System.Boolean)">
            <summary>
            Read the messages archived for this contact and view them in the chat view. The use of command in sequence will carry out the pagination (load the messages in blocks), to reset the pagination use the appropriate parameter.
            </summary>
            <param name="resetPaginate">Reset pagination, i.e. messages will be loaded from starting with the most recent message block (the first page of messages).</param>
        </member>
        <member name="T:EncryptedMessaging.Contact.PostBackup">
            <summary>
            Delegated function that is passed by the client application to back up a post
            </summary>
            <param name="chatId">Chat id</param>
            <param name="post">Encrypted post</param>
            <param name="receptionDate">Date of receipt of the post</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Contact.ExportPosts(EncryptedMessaging.Context,EncryptedMessaging.Contact.PostBackup,System.Collections.Generic.List{System.DateTime},System.DateTime,System.Nullable{System.Int32})">
            <summary>
            Export all posts (encrypted in row format), useful for example for making a backup
            </summary>
            <param name="context">Context</param>
            <param name="exportAction">Action that will be performed for each post (If you want to back up put the backup execution code here)</param>
            <param name="exclude">List of posts to exclude using the received date as a filter. It is recommended to use this parameter to avoid exporting posts that have already been exported in the past</param>
            <param name="receprionAntecedent">If set, consider only posts that are dated before the value indicated. It is useful for paginating messages in the chat view, or for telling the loading of messages in blocks. How to use this parameter: You need to store the date of the oldest message that is displayed in the chat, when you want to load a second block of messages you have to pass this date in order to get the next block</param>
            <param name="take">Limit the number of messages to take (set this value to paginate messages in chunks), in case you don't want the whole message list. Pass null to process all posts, without any paging!</param>
        </member>
        <member name="M:EncryptedMessaging.Contact.GetPosts(System.Action{System.Byte[],System.DateTime},System.Collections.Generic.List{System.DateTime},System.DateTime,System.Nullable{System.Int32})">
            <summary>
            Read chat posts (encrypted in row format) for this contact or group (you can use this function to backup chat data)
            </summary>
            <param name="action">Action to be performed for each post, the byte[] is binary data of the encrypted post that is read from the repository, DateTime is the time the post was received which you can use as a unique ID (you can use the ticks property of DateTime as a unique id ) </param>
            <param name="exclude">List of posts to exclude using the received date as a filter. It is recommended to use this parameter to avoid exporting posts that have already been exported in the past</param>
            <param name="receprionAntecedent">If set, consider only posts that are dated before the value indicated. It is useful for paginating messages in the chat view, or for telling the loading of messages in blocks. How to use this parameter: You need to store the date of the oldest message that is displayed in the chat, when you want to load a second block of messages you have to pass this date in order to get the next block</param>
            <param name="take">Limit the number of messages to take (set this value to paginate messages in chunks), in case you don't want the whole message list. Pass null to process all posts, without any paging!</param>
            <returns>Returns the date of arrival of the oldest message processed by the function. Use this value to page further requests by passing the "receprionAntecedent" parameter</returns>
        </member>
        <member name="M:EncryptedMessaging.Contact.SetPost(System.Byte[],System.DateTime)">
            <summary>
            Manually set the post (it is recommended to use this function only for restoring data saved with the help of GetPosts)
            </summary>
            <param name="post">The encrypted post binary data to be saved in the repository</param>
            <param name="receptionDate">DateTime is the time the post was received which you can use as a unique ID (you can use the ticks property of DateTime as a unique id )</param>
        </member>
        <member name="M:EncryptedMessaging.Contact.GetMessages(System.Action{EncryptedMessaging.Message,System.Boolean},System.Collections.Generic.List{System.DateTime},System.DateTime,System.Nullable{System.Int32})">
            <summary>
            Returns to a specific action, the messages visible in the chat. Useful function for exporting messages.
            </summary>
            <param name="actionToExecuteForEachMessage">Action that is performed for each message (use this action to export or process messages).</param>
            <param name="exclude">List of id messages to exclude (The reception time is used as an identifier)</param>
            <param name="receprionAntecedent">Filter messages considering only those prior to a certain date (useful for paging messages in blocks)</param>
            <param name="take">Limit the number of messages to take. If not set, the value set in the Context.Setting.MessagePagination settings will be used. Pass the Context.Setting.KeepPost value to process all messages!</param>
            <returns>Returns the date of arrival of the oldest message processed by the function. Use this value to page further requests by passing the "receprionAntecedent" parameter.</returns>
        </member>
        <member name="P:EncryptedMessaging.Contact.LastMessageTime">
            <summary>
            Date of the most recent message in the chat. Be careful, this value is UTC
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.LastNotMyMessageTime">
            <summary>
            Date of the last message time of the user.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.LastMessageTimeDistance">
            <summary>
            
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.LastMessageTimeText">
            <summary>
            Date of the most recent message in the chat in string format. This value is Local Time
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.Participants">
            <summary>
            The public keys of all members of the group
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.IsBlocked">
            <summary>
            
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.ImBlocked">
            <summary>
            
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.IsMuted">
            <summary>
            
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.SendConfirmationOfReading">
            <summary>
            
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.TranslationOfMessages">
            <summary>
            Indicates whether messages are required to be translated. If you change this parameter, you need to save the contact
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.IsVisible">
            <summary>
            
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.IsServer">
            <summary>
            
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.LastMessageDelivered">
            <summary>
            Set message information on last message delivery.
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.LastMessageSent">
            <summary>
            Set message information on last message sent.
            </summary>
        </member>
        <member name="T:EncryptedMessaging.Contact.MessageInfo">
            <summary>
            Set message information on creation and sent.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Contact.MessageInfo.#ctor">
            <summary>
            Message information function for creation and dataId.
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.MessageInfo.Creation">
            <summary>
            Integer data type for when a message is created
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.MessageInfo.DataId">
            <summary>
            unsigned integer data id.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.RemoteReadedList">
            <summary>
            Add new timestamp to to the list.
            </summary>
        </member>
        <member name="T:EncryptedMessaging.Contact.RemoteReaded">
            <summary>
            Add a timestamp to the message.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Contact.RemoteReaded.#ctor">
            <summary>
            Add a timestamp to the message.
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.RemoteReaded.IdParticipant">
            <summary>
            unsigned integer value.
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contact.RemoteReaded.TimeStamp">
            <summary>
            integer value for time.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.RemoteReaded.DateTime">
            <summary>
            Update the timestamp on the message.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.IsGroup">
            <summary>
            Set as group if more than two participants.
            </summary>
        </member>
        <member name="E:EncryptedMessaging.Contact.LastMessageChanged">
            <summary>
            Check if the last message was changed.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Contact.GetLastMessage">
            <summary>
            Returns null if there are no messages in the chat
            </summary>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Contact.UpdateLastMessagePreview">
            <summary>
            Use this function when deleting a message, to update the preview of the last message as well
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.LastMessagePreview">
            <summary>
            Get the preview of last message.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.LastMessageIsMy">
            <summary>
            Boolean check for last message.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.RemoteUnreaded">
            <summary>
            This is an empirical value, please do not use it unless necessary. Unfortunately in iOS it is not possible to locally update the red dot with the number of unread messages, this value must be sent with the notification.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.LastMessageFontAttributes">
            <summary>
            Integer value for last message font attributes.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.ChatId">
            <summary>
            Integer value of the Chat Id.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.UserId">
            <summary>
            Is the user id of your single contact, if is a group this value is null
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.FirebaseToken">
            <summary>
            Get the fire base token value and save it.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.DeviceToken">
             <summary>
            Return and save the device token. 
             </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.Avatar">
            <summary>
            Set avator for the input byte array.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Contact.Save(System.Boolean)">
            <summary>
            Save the data on cloud storage.
            </summary>
            <param name="cloudBackup">Boolean</param>
        </member>
        <member name="M:EncryptedMessaging.Contact.Clone">
            <summary>
            Create a shallow copy of the current object
            </summary>
            <returns></returns>
        </member>
        <member name="P:EncryptedMessaging.Contact.LastSeen">
            <summary>
            The last time the user watched this chat. All messages after this date are to be considered as unseen.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.UnreadMessages">
            <summary>
            Integer value get for unread messages.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Contact.MessageContainerUI">
            <summary>
            It can be used by the client program to store the user interface of this chat
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Contact.GetQrCode">
            <summary>
            Get thr QR code string for the context.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EncryptedMessaging.Contact.NameFirstLetter">
            <summary>
            Get the First letter and set it to uppercase.
            </summary>
        </member>
        <member name="T:EncryptedMessaging.ContactConverter">
            <summary>
            This class is used for converting contacts to public keys.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.ContactConverter.#ctor(EncryptedMessaging.Context)">
            <summary>
            Set the context to readonly.
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="M:EncryptedMessaging.ContactConverter.GetUserId(System.Byte[])">
            <summary>
            From the public key he obtains the user ID, a unique number represented by 8 bytes (ulong)
            For privacy reasons this algorithm is not reversible: From the public key we can obtain the user ID but it is not possible to trace the public key by having the user ID
            </summary>
            <param name="publicKey"></param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.ContactConverter.PublicKeysToParticipants(System.String,System.Collections.Generic.List{System.Byte[]}@)">
            <summary>
            This function obtains the list of participants from a string that represents everyone's public key
            </summary>
            <param name="publicKeys">string that represents everyone's public key</param>
            <param name="participants">participants in the group</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:EncryptedMessaging.ContactConverter.ParticipantsToPublicKeys(System.Collections.Generic.List{System.Byte[]},System.String@,System.Boolean)">
            <summary>
            Boolean check for validating key.
            </summary>
            <param name="participants">Partipants</param>
            <param name="publicKeys">Public Key</param>
            <param name="removeMyKey">Remove Key</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.ContactConverter.ParticipantsToChatId(System.Collections.Generic.List{System.Byte[]},System.String)">
            <summary>
            Calculate the hash id of the contact. For groups, the name also comes into play in the computation because there can be groups with the same participants but different names
            </summary>
            <param name="participants">Partipants</param>
            <param name="name">The name parameter must only be passed for groups, because there are groups with the same members but different names</param>
            <returns>Unisgned Integer</returns>
        </member>
        <member name="M:EncryptedMessaging.ContactConverter.ValidateKeys(System.Collections.Generic.List{System.Byte[]})">
            <summary>
            
            </summary>
            <param name="participants"></param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.ContactConverter.ValidateKeys(System.String)">
            <summary>
            Boolean check for partipants public keys.
            </summary>
            <param name="keys">Key</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:EncryptedMessaging.ContactConverter.ValidateKey(System.String)">
            <summary>
            This will check if the basekey is valid , if not key is converted from base 64 key.
            </summary>
            <param name="base64Key"></param>
            <returns>key</returns>
        </member>
        <member name="M:EncryptedMessaging.ContactConverter.ValidateKey(System.Byte[])">
            <summary>
            Validates the key provided.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.ContactConverter.NormalizeParticipants(System.Collections.Generic.List{System.Byte[]}@,System.Boolean)">
            <summary>
            Remove they key if it is not null and assign a new Public key Binary for empty values.
            </summary>
            <param name="participants">Participants</param>
            <param name="removeMyKey">Byte array</param>
        </member>
        <member name="M:EncryptedMessaging.ContactConverter.ParticipantsToUserIds(System.Collections.Generic.List{System.Byte[]},EncryptedMessaging.Context)">
            <summary>
            Change the partipants to their specific User Ids.
            </summary>
            <param name="participants">Partipants</param>
            <param name="context">Context</param>
            <returns>User Id</returns>
        </member>
        <member name="T:EncryptedMessaging.ContactMessage">
            <summary>
            
            </summary>
        </member>
        <member name="M:EncryptedMessaging.ContactMessage.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data">Byte array</param>
        </member>
        <member name="M:EncryptedMessaging.ContactMessage.#ctor(System.String)">
            <summary>
            Convert  the QR code to base 64 string.
            </summary>
            <param name="qrCode">QR code</param>
        </member>
        <member name="M:EncryptedMessaging.ContactMessage.GetContactMessage(System.Byte[])">
            <summary>
            Returns the contact represented by the input. If the input is invalid it will return null
            </summary>
            <param name="data">input byte array</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.ContactMessage.GetContactMessage(System.String)">
            <summary>
            Returns the contact represented by the input. If the input is invalid it will return null
            </summary>
            <param name="qrCode">input base 64</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.ContactMessage.GetProperties(EncryptedMessaging.Context,System.String@,EncryptedMessaging.Contact.RuntimePlatform@,System.String@,System.String@)">
            <summary>
            Return the OS and language for a non-group contact
            </summary>
            <param name="context">Context</param>
            <param name="language">Language</param>
            <param name="os">Os</param>
            <param name="firebaseToken">Token Firebase</param>
            <param name="deviceToken">Device token for IOS</param>
        </member>
        <member name="P:EncryptedMessaging.ContactMessage.Name">
            <summary>
            Update the name of the group.
            </summary>
        </member>
        <member name="F:EncryptedMessaging.ContactMessage.IsUpdate">
            <summary>
            Boolean for update, default is set false.
            </summary>
        </member>
        <member name="F:EncryptedMessaging.ContactMessage.Participants">
            <summary>
            List for participants.
            </summary>
        </member>
        <member name="T:EncryptedMessaging.ContactMessage.Properties">
            <summary>
            Strings used in this class.
            </summary>
        </member>
        <member name="F:EncryptedMessaging.ContactMessage.Properties.Name">
            <summary>
            NAme of the group.
            </summary>
        </member>
        <member name="F:EncryptedMessaging.ContactMessage.Properties.Language">
            <summary>
            Language.
            </summary>
        </member>
        <member name="F:EncryptedMessaging.ContactMessage.Properties.Key">
            <summary>
            Byte array for key.
            </summary>
        </member>
        <member name="F:EncryptedMessaging.ContactMessage.Properties.Os">
            <summary>
            Operating system.
            </summary>
        </member>
        <member name="F:EncryptedMessaging.ContactMessage.Properties.FirebaseToken">
            <summary>
            Firebase Token.
            </summary>
        </member>
        <member name="F:EncryptedMessaging.ContactMessage.Properties.DeviceToken">
            <summary>
            Device token for IOS.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.ContactMessage.GetParticipantsKeys(EncryptedMessaging.Context)">
            <summary>
            Get the keys of the particpant by converting the byte array input.
            </summary>
            <param name="context">Context</param>
            <returns>Keys</returns>
        </member>
        <member name="M:EncryptedMessaging.ContactMessage.GetDataMessageContact(EncryptedMessaging.Contact,EncryptedMessaging.Context,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Assign public keys to the partipants and set the firebase and device token for the users.
            </summary>
            <param name="contact">User contact</param>
            <param name="context">Context</param>
            <param name="addFirebaseTokken">Token Firebase</param>
            <param name="addDeviceTokken">Device Token of iOS</param>
            <param name="fullDataParticipant"></param>
            <param name="purposeIsUpdateOnly">Update contact</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.ContactMessage.GetQrCode(EncryptedMessaging.Contact,EncryptedMessaging.Context)">
            <summary>
            Get the contact info of the other user from the base 64 string.
            </summary>
            <param name="contact">User contact</param>
            <param name="context">context</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.ContactMessage.GetMyQrCode(EncryptedMessaging.Context)">
            <summary>
            Get the contact onfo of the person using the app from base 64 string.
            </summary>
            <param name="context">context</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.ContactMessage.AddContact(System.String,EncryptedMessaging.Context,EncryptedMessaging.Contacts.SendMyContact)">
            <summary>
            Create new contact by using the QR code
            </summary>
            <param name="qrCode">QR code</param>
            <param name="context">Context</param>
            <param name="sendMyContact">Option to send my contact to the contact I add</param>
        </member>
        <member name="T:EncryptedMessaging.Contacts">
            <summary>
            This class contains all functions used for multiple contacts/group functionalities associated with them.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Contacts.#ctor(EncryptedMessaging.Context)">
            <summary>
            Set the time stamp when a message is sent to the participants.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:EncryptedMessaging.Contacts.Observable`1">
            <summary>
            Add new participants to the group.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EncryptedMessaging.Contacts.Observable`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Fucntion for change in the partipants in the group.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:EncryptedMessaging.Contacts.Observable`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Update the partipants list.
            </summary>
            <param name="list">list</param>
        </member>
        <member name="T:EncryptedMessaging.Contacts.LastMessagChanged">
            <summary>
            Server side rule for last message changed.
            </summary>
            <param name="message">string</param>
        </member>
        <member name="E:EncryptedMessaging.Contacts.ContactsListChanged">
            <summary>
            Event action for contact list change.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Contacts.RestoreMyContactFromCloud">
            <summary>
            This function is used to restore a contact from the cloud storage.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Contacts.SortContacts(System.Boolean)">
            <summary>
            This feature sorts contacts by sharing what has more recent messages in chat
            Remember to save the contact list after ordering it to keep the changes with the application restart
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Contacts.GetContacts">
            <summary>
            Get a observable contact list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Contacts.ForEachContact(System.Action{EncryptedMessaging.Contact})">
            <summary>
            For each visible contact it performs an action (Server-type contacts are excluded from performing the action, because they are generally not visible in the Address Book).
            </summary>
            <param name="action">Action to execute</param>
        </member>
        <member name="T:EncryptedMessaging.Contacts.OnContactAddedHandler">
            <summary>
            Delegate for the event that is triggered when a contact is added.
            </summary>
            <param name="contact">The new contact added</param>
        </member>
        <member name="E:EncryptedMessaging.Contacts.OnContactAdded">
            <summary>
            Event that is triggered when new contacts are added
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Contacts.AddContact(EncryptedMessaging.Contact,EncryptedMessaging.Contacts.SendMyContact,System.Boolean,EncryptedMessaging.ContactMessage)">
            <summary>
            Add a new contact and send it if necessary.
            </summary>
            <param name="contact">Contact to add</param>
            <param name="sendMyContact">Option to send my contact to the contact I add</param>
            <param name="sendToGroup">If the contact is a group, you can decide to send the contact added to the group (true), or to individual participants (false)</param>
            <param name="setSubContact">If this value is set, the values of the sub contacts will be taken from this object</param>
            <returns></returns>
        </member>
        <member name="T:EncryptedMessaging.Contacts.SendMyContact">
            <summary>
            Enumerator that specifies whether when a contact is added to him I should send mine, and for what purpose
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contacts.SendMyContact.None">
            <summary>
            Do not send my contact
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contacts.SendMyContact.Send">
            <summary>
            Send my contact to another contact, the contact contains my real name information
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Contacts.SendMyContact.SendNamelessForUpdate">
            <summary>
            It is used to update the firebase tokens and the device id without changing the contact name. This is required when a user reinstalls the application.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Contacts.AddContact(EncryptedMessaging.ContactMessage,EncryptedMessaging.Contacts.SendMyContact)">
            <summary>
            Turn a message into a contact. The ContactMessage is a type of data that is used to send contacts over the network
            </summary>
            <param name="contactMessage">A contact that has been received by the network</param>
            <param name="sendMyContact">Define whether the contact added here should receive our contact via the network, whether with the name or without. If we send our contact without a name, the recipient will only update the Firebase tokens and the device id, if instead the contact has the name, the recipient will add our contact including our real name.</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Contacts.AddContact(System.String,EncryptedMessaging.Contacts.SendMyContact)">
            <summary>
            Add contact from the imput strng QR code.
            </summary>
            <param name="qrCode">QR code </param>
            <param name="sendMyContact">Option to send my contact to the contact I add</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Contacts.AddContact(System.Collections.Generic.List{EncryptedMessaging.Contact},System.String,System.Boolean,EncryptedMessaging.Contacts.SendMyContact)">
            <summary>
            Add a contact to the address book, if there is already a contact with the same key then the existing contact will be renamed
            </summary>
            <param name="contacts">The list of source contacts to create a group</param>
            <param name="name">The name of the group/contact</param>
            <param name="isServer">Is a server (It will not be visible in the contacts directory)</param>
            <param name="sendMyContact">Option to send my contact to the contact I add</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Contacts.AddContact(System.String,System.String,System.Boolean,EncryptedMessaging.Contacts.SendMyContact)">
            <summary>
            Add a contact to the address book, if there is already a contact with the same key then the existing contact will be renamed
            </summary>
            <param name="publicKeys">The group keys or the contact key</param>
            <param name="name">The name of the group/contact</param>
            <param name="isServer">Is a server (It will not be visible in the contacts directory)</param>
            <param name="sendMyContact">Option to send my contact to the contact I add</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Contacts.AddContactByKeys(System.String,System.String,System.Boolean,EncryptedMessaging.Contacts.SendMyContact)">
            <summary>
            Add a contact to the address book, if there is already a contact with the same key then the existing contact will be renamed
            </summary>
            <param name="publicKeys">The group keys or the contact key</param>
            <param name="name">The name of the group/contact</param>
            <param name="isServer">Is a server (It will not be visible in the contacts directory)</param>
            <param name="sendMyContact">Option to send my contact to the contact I add</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Contacts.AddContact(System.Collections.Generic.List{System.Byte[]},System.String,System.Boolean,System.String,EncryptedMessaging.Contacts.SendMyContact)">
            <summary>
            Add contact to the address book, if the contact already exist, return duplicate. 
            </summary>
            <param name="participants">Users in the list.</param>
            <param name="name">The name of the group/contact</param>
            <param name="isServer">Is a server (It will not be visible in the contacts directory)</param>
            <param name="language">Language</param>
            <param name="sendMyContact">Option to send my contact to the contact I add</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Contacts.RemoveContact(EncryptedMessaging.Contact)">
            <summary>
            Remove the contact from the address book.
            </summary>
            <param name="contact"></param>
        </member>
        <member name="M:EncryptedMessaging.Contacts.RemoveContact(System.String)">
            <summary>
            Remove the contact from the address book.
            </summary>
            <param name="key">Public key</param>
        </member>
        <member name="M:EncryptedMessaging.Contacts.ClearContact(System.String)">
            <summary>
            Clear the chat history with the contact.
            </summary>
            <param name="key">Public key</param>
        </member>
        <member name="M:EncryptedMessaging.Contacts.GetParticipants(System.UInt64)">
            <summary>
            Get the List of contacts in the group.
            </summary>
            <param name="chatId">64 bit unsigned integer</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Contacts.GetContact(System.UInt64)">
            <summary>
            Get the single  contact stored in the list.
            </summary>
            <param name="chatId">64 bit unsigned integer</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Contacts.GetContactByUserID(System.UInt64)">
            <summary>
            Get contacts by user Id, if not present, returns a null value.
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Contacts.GetParticipant(System.Byte[])">
            <summary>
            Look for a contact based on his public key, if not present in the book, a null value will be returned;
            Each contact is a group of at least 2 people: The user and the recipients; Contacts with more than one recipient are groups and will not be taken into consideration for research.
            </summary>
            <param name="key">Public key</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Contacts.GetParticipantName(System.Byte[])">
            <summary>
            If the participant is present in the address book, he returns his name, otherwise he invents a name
            </summary>
            <param name="key">Public key</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Contacts.GetGroupParicipantContacts(EncryptedMessaging.Contact)">
            <summary>
            Look for contacts in the group list and add new partipants if not present already.
            </summary>
            <param name="contact">>The list of source contact to create a group</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Contacts.ContactAlreadyExists(System.Collections.Generic.List{System.Byte[]},System.String)">
            <summary>
            Check if a contact already exists. The check is done using public keys
            </summary>
            <param name="participants">Chat participants</param>
            <param name="name">For groups you must also pass the name because it is allowed to have groups with the same members but different names</param>
            <returns>Returns the duplicate contact if it already exists, otherwise null</returns>
        </member>
        <member name="M:EncryptedMessaging.Contacts.ContactAlreadyExists(System.String,System.String)">
            <summary>
            Check if a contact already exists. The check is done using public keys
            </summary>
            <param name="publicKeys">PublicKeys of contact</param>
            <param name="name">Name of the partipants</param>
            <returns>Returns the duplicate contact if it already exists, otherwise null</returns>
        </member>
        <member name="M:EncryptedMessaging.Contacts.Pseudonym(System.String)">
            <summary>
            Convert public key to participants.
            </summary>
            <param name="publicKeys"></param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Contacts.Pseudonym(System.Collections.Generic.List{System.Byte[]})">
            <summary>
            Assign a Pseudonym for a participant in the list.
            </summary>
            <param name="participants"></param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Contacts.Pseudonym(System.UInt64)">
            <summary>
            Assign a Pseudonym for a participant for the unisgned long integer input in the list.
            </summary>
            <param name="userId">Unsigned long integer</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Contacts.Pseudonym(System.Collections.Generic.List{System.UInt64})">
            <summary>
            Assign pseudonym for the unsigned integer user id.
            </summary>
            <param name="userIds"></param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Contacts.Colors(System.UInt64,System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Color functionality for the event on user Id.
            </summary>
            <param name="userId"></param>
            <param name="light"></param>
            <param name="dark"></param>
        </member>
        <member name="M:EncryptedMessaging.Contacts.Colors(System.Collections.Generic.List{System.Byte[]},System.Drawing.Color@,System.Drawing.Color@)">
            <summary>
            Color functionality for the event on partipants.
            </summary>
            <param name="participants"></param>
            <param name="light"></param>
            <param name="dark"></param>
        </member>
        <member name="M:EncryptedMessaging.Contacts.GetMyContact(System.Boolean)">
            <summary>
            Create Contact user data in the contact is null.
            </summary>
            <param name="nameless">boolean</param>
            <returns></returns>
        </member>
        <member name="F:EncryptedMessaging.Contacts.CloudUserId">
            <summary>
            set unsigned integer value for cloud user id.
            </summary>
        </member>
        <member name="T:EncryptedMessaging.Context">
            <summary>
            Our mission is to exacerbate the concept of security in messaging and create something conceptually new and innovative from a technical point of view.
            Top-level encrypted communication (there is no backend , there is no server-side contact list, there is no server but a simple router, the theory is that if the server does not exist then the server cannot be hacked, the communication is anonymous, the IDs are derived from a hash of the public keys, therefore in no case it is possible to trace who originates the messages, the encryption key is changed for each single message, and a system of digital signatures guarantees the origin of the messages and prevents attacks "men in de middle").
            We use different concepts introduced with Bitcoin technology and the library itself: there are no accounts, the account is simply a pair of public and private keys, groups are also supported, the group ID is derived from a hash computed through the public keys of the members, since the hash process is irreversible, the level of anonymity is maximum).
            The publication of the source wants to demonstrate the genuineness of the concepts we have adopted! Thanks for your attention!
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Context.#ctor(System.String,System.String,System.Boolean,System.String,System.Boolean,System.Nullable{System.Boolean},System.Action{System.Action},System.Func{System.String,System.String},SecureStorage.Initializer.SetKeyKalueSecure,System.Func{System.String},System.Func{System.String},System.String)">
            <summary>
            This method initializes the network.
            You can join the network as a node, and contribute to decentralization, or hook yourself to the network as an external user.
            To create a node, set the MyAddress parameter with your web address.If MyAddress is not set then you are an external user.
            </summary>
            <param name="entryPoint">The entry point server, to access the network</param>
            <param name="networkName">The name of the infrastructure. For tests we recommend using "testnet"</param>
            <param name="multipleChatModes">If this mode is enabled there will be multiple chat rooms simultaneously, all archived messages will be preloaded with the initialization of this library, this involves a large use of memory but a better user experience. Otherwise, only one char room will be managed at a time, archived messages will be loaded only when you enter the chat, this mode consumes less memory.</param>
            <param name="privateKeyOrPassphrase"></param>
            <param name="isServer">Indicates if a server is initialized: The server has some differences compared to the device which are: It does not store contacts and posts (contacts are acquired during the session and when it expires they are deleted, so the contacts are not even synchronized on the cloud, there is no is the backup and restore that instead occurs for applications on devices).</param>
            <param name="internetAccess">True if network is available</param>
            <param name="invokeOnMainThread">Method that starts the main thread: Actions that have consequences with updating the user interface must run on the main thread otherwise they cause a crash</param>
            <param name="getSecureKeyValue">System secure function to read passwords and keys saved with the corresponding set function</param>
            <param name="setSecureKeyValue">System secure function for saving passwords and keys</param>
            <param name="getFirebaseToken">Function to get FirebaseToken (the function is passed and not the value, so as not to block the main thread as this sometimes takes a long time). FirebaseToken is used by firebase, to send notifications to a specific device. The sender needs this information to make the notification appear to the recipient.</param>
            <param name="getAppleDeviceToken">Function to get AppleDeviceToken (the function is passed and not the value, so as not to block the main thread as this sometimes takes a long time). In ios AppleDeviceToken is used to generate notifications for the device. Whoever sends the encrypted message needs this data to generate a notification on the device of who will receive the message.</param>
            <param name="cloudPath">Specify the location of the cloud directory (where it saves and reads files), if you don't want to use the system one. The cloud is used only in server mode</param>
        </member>
        <member name="T:EncryptedMessaging.Context.OnMessageArrived">
            <summary>
            Delegate for the action to be taken when messages arrive
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="E:EncryptedMessaging.Context.OnNotification">
            <summary>
            Delegate that runs automatically when messages are received. On systems that have a stable connection (server or desktop), this event can be used to generate notifications.
            Note: Only messages that have viewable content in the chat trigger this event
            </summary>
        </member>
        <member name="T:EncryptedMessaging.Context.ViewMessageUi">
            <summary>
            Function delegated with the event that creates the message visible in the user interface. This function will then be called whenever a message needs to be drawn in the chat. Server-type host systems that don't have messages to render in chat probably don't need to set this action
            </summary>
            <param name="message">The message to render in the chat view</param>
            <param name="isMyMessage">True if you call it to render my message</param>
        </member>
        <member name="E:EncryptedMessaging.Context.ViewMessage">
            <summary>
            It is the function delegate who writes a message in the chat. This function must be set when the App() class is initialized in the common project.
            </summary>
        </member>
        <member name="E:EncryptedMessaging.Context.OnContactEvent">
            <summary>
            This delegate allows you to set up a event that will be called whenever a system message arrives. Messages that have a graphical display in the chat do not trigger this event.
            Use OnMessageArrived to intercept incoming messages that have a content display in the chat
            </summary>
        </member>
        <member name="T:EncryptedMessaging.Context.LastReadedTimeChangeEvent">
            <summary>
            Event that is raised to inform when someone has read a sent message
            </summary>
            <param name="contact">Contact (group or single user))</param>
            <param name="participantId">ID of participant who has read</param>
            <param name="lastRadTime">When the last reading took place</param>
        </member>
        <member name="E:EncryptedMessaging.Context.OnLastReadedTimeChange">
            <summary>
            Event that is performed when a contact reads a message that has been sent
            </summary>              
        </member>
        <member name="T:EncryptedMessaging.Context.MessageDeliveredEvent">
            <summary>
            Delegate for the event that notifies when messages are sent
            </summary>
            <param name="contact">Contact (group or single user)</param>
            <param name="deliveredTime">When message was delivered.</param>
            <param name="isMy">Boolean</param>
        </member>
        <member name="E:EncryptedMessaging.Context.OnMessageDelivered">
            <summary>
            Event that occurs when a message has been sent. Use this event to notify the host application when a notification needs to be sent to the recipient.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Context.ThreadSafeCalls(System.Action)">
            <summary>
            thread-safe calls
            https://docs.microsoft.com/en-us/dotnet/desktop/winforms/controls/how-to-make-thread-safe-calls?view=netdesktop-6.0
            </summary>
            <param name="action">trigger event</param>
        </member>
        <member name="M:EncryptedMessaging.Context.RunAfterInstanceCreate(System.Object)">
            <summary>
            What to do when the context instance has been created and released
            Do not put instructions here that send messages (otherwise the application crashes due to isReady which will remain false)
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:EncryptedMessaging.Context.RunAfterInitialization">
            <summary>
            Put here any operations that should send messages when after the context instance has been created
            </summary>
        </member>
        <member name="E:EncryptedMessaging.Context.OnContextIsInitialized">
            <summary>
            Function that is called when the context has been fully initialized.
            If you want to automate something after context initialization, you can do so by assigning an action to this value!
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Context.EntryPoint">
            <summary>
            The entry point server, to access the network
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Context.OnConnectivityChange(System.Boolean)">
            <summary>
            Function that must be called whenever the host system has a change of state on the connection. This parameter must be set when starting the application.
            If it is not set, the libraries do not know if there are changes in the state of the internet connection, and the messages could remain in the queue without being sent.
            </summary>
            <param name="Connectivity">Network connecttion status true or false</param>
        </member>
        <member name="P:EncryptedMessaging.Context.IsServer">
            <summary>
            Server mode is the exclusive mode for working without saving posts to the repositories. This is how server applications must be initialized. This property returns the status of the server mode.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Context.KeepAliveFailures">
            <summary>
            Number of failure connnection
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Context.IsConnected">
            <summary>
            Returns the current status of the connection with the router/server
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Context.ReEstablishConnection(System.Boolean)">
            <summary>
            Function that reactivates the connection when it is lost. Its use is designed for all those situations in which the connection could be interrupted, for example mobile applications can interrupt the connection when they are placed in the background. When the application returns to the foreground it is advisable to call this comondo to reactivate the connection.      
            If this method is not called, the mobile application returns to the foreground, it could stop working and stop receiving messages, while notifications could arrive anyway if routed with Firebase or other external services.
            </summary>
            <param name="iMSureThereIsConnection"></param>
        </member>
        <member name="F:EncryptedMessaging.Context.InvokeOnMainThread">
            <summary>
            Use this property to call the main thread when needed:
            The main thread must be used whenever the user interface needs to be updated, for example, any operation on an ObservableCollection that changes elements must be done by the main thread,  otherwise rendering on the graphical interface will generate an error.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Context.AddCloudManager(EncryptedMessaging.ICloudManager)">
            <summary>
            Set up a cloud during context initialization if you want to use cloud features to save avatarms, contacts and other data 
            </summary>
            <param name="cloudManager">The class that allows you to manage Cloud features</param>
        </member>
        <member name="T:EncryptedMessaging.CryptoServiceProvider">
            <summary>
            This class handles the encryption and decryption of the passphrases and validations.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.CryptoServiceProvider.#ctor(System.Byte[])">
            <summary>
            The ImportCspBlob method initializes the key data of an AsymmetricAlgorithm object using a blob that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:EncryptedMessaging.CryptoServiceProvider.#ctor(System.String)">
            <summary>
            Instance the object
            </summary>
            <param name="passphrase">Passphrase or private key base 64</param>
        </member>
        <member name="M:EncryptedMessaging.CryptoServiceProvider.GetPrivateKeyBase58">
            <summary>
            Gets the private key through wallet import format. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.CryptoServiceProvider.VerifyHash(System.Byte[],System.Byte[])">
            <summary>
            Verifies that a digital signature is valid by determining the hash value in the signature using the specified hash algorithm and padding, and comparing it to the provided hash value.
            </summary>
            <param name="hash256">The hash value of the signed data.</param>
            <param name="signature">The signature data to be verified.</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.CryptoServiceProvider.SignHash(System.Byte[])">
            <summary>
            Generates a digital signature for the specified hash value.
            </summary>
            <param name="hash256">The hash value of the data that is being signed.</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.CryptoServiceProvider.ExportCspBlob(System.Boolean)">
            <summary>
            Exports a blob that contains the key information associated with an AsymmetricAlgorithm privatekey.
            </summary>
            <param name="includePrivateKey"></param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.CryptoServiceProvider.GetPassphrase">
            <summary>
            Get the passPhrase property, If the string is empty return null.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.CryptoServiceProvider.ImportCspBlob(System.Byte[])">
            <summary>
            The ImportCspBlob method initializes the key data of an AsymmetricAlgorithm object using a blob that is compatible with the unmanaged Microsoft Cryptographic API (CAPI).
            </summary>
            <param name="key">A byte array that represents an asymmetric key blob.</param>
        </member>
        <member name="M:EncryptedMessaging.CryptoServiceProvider.Encrypt(System.Byte[])">
            <summary>
            Encrypts the private key. 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.CryptoServiceProvider.Decrypt(System.Byte[])">
            <summary>
            Decrypts the private key. 
            </summary>
            <param name="encryptedData"></param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.CryptoServiceProvider.IsValid">
            <summary>
            Checks validity and returns boolean.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.CryptoServiceProvider.Dispose">
             <summary>
            Public implementation of Dispose pattern callable by consumers. 
             </summary>
        </member>
        <member name="M:EncryptedMessaging.CryptoServiceProvider.Dispose(System.Boolean)">
            <summary>
            Protected implementation of Dispose pattern.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:EncryptedMessaging.CryptoServiceProvider.ComputeHash(System.Byte[])">
            <summary>
            Computes the hash value for the specified byte array.
            </summary>
            <param name="data">Combined packages</param>
            <returns>Byte array</returns>
        </member>
        <member name="T:EncryptedMessaging.Functions">
            <summary>
            
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Functions.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            encrypt the user input for the password.
            </summary>
            <param name="input">user input</param>
            <param name="password">Byte array</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Functions.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            Decrypt the password
            </summary>
            <param name="input">User input</param>
            <param name="password">Byte array</param>
            <returns></returns>
        </member>
        <member name="T:EncryptedMessaging.Functions.ByteListComparer">
            <summary>
            Compare the two byte list and return the result.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Functions.ByteListComparer.Compare(System.Collections.Generic.IList{System.Byte},System.Collections.Generic.IList{System.Byte})">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Functions.DateToRelative(System.DateTime)">
            <summary>
            Set the date to relative  if same return null.
            </summary>
            <param name="date">Instant in time</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Functions.SplitDataWithZeroEnd(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            split the data and create new.
            </summary>
            <param name="data">Combined packages</param>
            <param name="offset">The offset where to start</param>
            <param name="pointer"></param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Functions.SplitData(System.Byte[],System.Boolean,System.Int32)">
            <summary>
            Divide merged data packets with join function
            </summary>
            <param name="data">Combined packages</param>
            <param name="lenAsByte">Use the same value used with the join function</param>
            <param name="offset">The offset where to start</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Functions.JoinData(System.Boolean,System.Byte[][])">
            <summary>
            Join data packets
            </summary>
            <param name="lenAsByte">If true, packets must be smaller than 256 bytes</param>
            <param name="values">packages to join</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Functions.PassphraseValidation(System.String)">
            <summary>
            Vaidate the passphrase, if wrong return false.
            </summary>
            <param name="passphrase"></param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Functions.FirstUpper(System.String)">
            <summary>
            Converts the value of a specified Unicode character to its uppercase equivalent using specified culture-specific formatting information.
            </summary>
            <param name="text"></param>
            <returns> The uppercase equivalent of c, modified according to culture, or the unchanged value of c if c is already uppercase, has no uppercase equivalent, or is notalphabetic.</returns>
        </member>
        <member name="M:EncryptedMessaging.Functions.SplitIncomingData(System.Byte[],System.Boolean)">
            <summary>
            Split arrays of incoming data
            </summary>
            <param name="data">Array of data to split</param>
            <param name="smallValue">If true, the format supports values no larger than 256 bytes</param>
            <returns>Key value collection</returns>
        </member>
        <member name="M:EncryptedMessaging.Functions.ToHex(System.Byte[])">
            <summary>
            Convert byte array to its equivalent string representation that is encoded with uppercase hex characters.
            </summary>
            <param name="ba"></param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Functions.HexToBytes(System.String)">
            <summary>
            Convert hex character to its equivalent byte array.
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Functions.ToBase64Url(System.Byte[])">
            <summary>
            Convert byte array to base 64 url.
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Functions.FromBase64Url(System.String)">
            <summary>
            Convert from base 64 url to byte array
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Functions.BitesToFirebaseToken(System.Byte[])">
            <summary>
            Convert byte to firebase token
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Functions.FirebaseTokenToBytes(System.String)">
            <summary>
            Convert firebase token to byte array.
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:EncryptedMessaging.Message">
             <summary>
            Here are all the functions necessary to process messages in binary format, create messages and read them.
             </summary>
        </member>
        <member name="M:EncryptedMessaging.Message.#ctor(EncryptedMessaging.Context,EncryptedMessaging.Contact,EncryptedMessaging.MessageFormat.MessageType,System.Byte[],System.DateTime,System.Byte[],System.DateTime,System.UInt64,System.Boolean,System.UInt64,System.UInt64)">
            <summary>
            Message properties.
            </summary>
            <param name="context">Context</param>
            <param name="contact">Recipent</param>
            <param name="type">Type</param>
            <param name="author">Sender</param>
            <param name="creation">Date/time of sending</param>
            <param name="data">Byte array</param>
            <param name="receptionTime">Date/time of delivery</param>
            <param name="postId">Unsigned long integer</param>
            <param name="encrypted">Boolean</param>
            <param name="chatId">Unsigned long integer</param>
            <param name="authorId">Unsigned long integer</param>
        </member>
        <member name="F:EncryptedMessaging.Message.Context">
            <summary>
            Context implementation.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Message.Contact">
            <summary>
            The chat group.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Message.Type">
            <summary>
            The public key of the author.
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Message.AuthorId">
            <summary>
            The author Id NOTE: This value is setting only in not encrypted message!
            </summary>
        </member>
        <member name="F:EncryptedMessaging.Message.ChatId">
            <summary>
            Unique identification number of the chat.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Message.GetAuthor">
            <summary>
            This array is the identifier of the chat participant.
            If you want to get the corresponding contact, you have to use the function Contacts.GetParticipant(Author), If the contact is not in the address book you receive a null value
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Message.AuthorName">
            <summary>
            If the sender is present in the address book, it returns its name, otherwise it invents a name.
            If the message is encrypted this value is null, then use AuthorId to know the author.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EncryptedMessaging.Message.Creation">
            <summary>
            Creation date and time UTC format
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Message.ReceptionTime">
            <summary>
            Reception date and time UTC format
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Message.ReplyToPostId">
            <summary>
            If different from null it indicates that this is a reply post previously sent in the group that the contact represents 
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Message.PostId">
            <summary>
            Unique identifier that indicates the message in a chat. Use this property in all contexts where you need to identify a message, for example, when replying to a specific message, you are referring to the message with the ID of the message you want to reply to.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Message.GetData">
            <summary>
            Returns the message data, however it may return null if the private key is changed or if I contact is deleted
            If you don't need messages when rendering the UI, but you think you need them in the future, don't use this function but use GetDataFunction to get the data when you need it (so you will save the ram memory)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Message.GetSubApplicationCommandWithParameters(System.UInt16@,System.UInt16@,System.Collections.Generic.List{System.Byte[]}@)">
            <summary>
            Read the commands and parameters sent by a sub application via <see cref="M:EncryptedMessaging.Messaging.SendCommandToSubApplication(EncryptedMessaging.Contact,System.UInt16,System.UInt16,System.Boolean,System.Boolean,System.Byte[][])"/>
            </summary>
            <param name="appId">Sub application Id (plugin Id)</param>
            <param name="command">Id of the command used in the protocol of the sub application</param>
            <param name="parameters">The parameters that were sent with the command</param>
            <returns>False if the received message is not of the SubApplicationCommandWithParameters type</returns>
        </member>
        <member name="M:EncryptedMessaging.Message.GetSubApplicationCommandWithData(System.UInt16@,System.UInt16@,System.Byte[]@)">
            <summary>
            Read the commands and data sent by a sub application via <see cref="M:EncryptedMessaging.Messaging.SendCommandToSubApplication(EncryptedMessaging.Contact,System.UInt16,System.UInt16,System.Boolean,System.Boolean,System.Byte[])"/>
            </summary>
            <param name="appId">Sub application Id (plugin Id)</param>
            <param name="command">Id of the command used in the protocol of the sub application</param>
            <param name="data">The data that was sent with the command</param>
            <returns>False if the received message is not of the SubApplicationCommandWithData type</returns>
        </member>
        <member name="M:EncryptedMessaging.Message.GetSubApplicationCommand(System.UInt16@,System.UInt16@,System.Byte[]@,System.Collections.Generic.List{System.Byte[]}@)">
            <summary>
            Read the commands sent by a sub application via <see cref="M:EncryptedMessaging.Messaging.SendCommandToSubApplication(EncryptedMessaging.Contact,System.UInt16,System.UInt16,System.Boolean,System.Boolean,System.Byte[])"/> or <see cref="M:EncryptedMessaging.Messaging.SendCommandToSubApplication(EncryptedMessaging.Contact,System.UInt16,System.UInt16,System.Boolean,System.Boolean,System.Byte[][])"/>
            It is an alternative method to the methods GetSubApplicationCommandWithData and GetSubApplicationCommandWithParameters
            </summary>
            <param name="appId">Sub application Id (plugin Id)</param>
            <param name="command">Id of the command used in the protocol of the sub application</param>
            <param name="data">The data that was sent with the command</param>
            <param name="parameters">The parameters that were sent with the command</param>
            <returns>False if the received message is not of the SubApplicationCommandWithData type</returns>
        </member>
        <member name="M:EncryptedMessaging.Message.GetShareEncryptedContentData(System.String@,System.Byte[]@,System.String@,System.String@)">
            <summary>
            Read messages generated by <see cref="M:EncryptedMessaging.Messaging.ShareEncryptedContent(EncryptedMessaging.Contact,System.String,System.Byte[],System.String,System.String)"/> , containing shared and encrypted material on the server. It is used to share Videos or other huge files which cannot be sent with the messaging protocol
            </summary>
            <param name="contentType">Three characters describing the type of content being shared. Use the three characters of the file expansion, for example: MP4, DOC, PDF, ISO, etc ...</param>
            <param name="privateKey">The private key to decrypt the content.</param>
            <param name="description">Literal description of content</param>
            <param name="serverUrl">The URL (max 256 char) of the server where the shared content resides. The name of the file is not necessary because it is obtained from the private key. If this value is allowed, then the server will be the default one</param>
        </member>
        <member name="M:EncryptedMessaging.Message.GetDataFunction">
            <summary>
            If you need to access the data after the UI has been drawn, you can get this function and memorize it in your event
             For example, if you have to show a video, or if you have to play audio when the user clicks on the message in the chat
            </summary>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Message.Delete(System.Boolean)">
            <summary>
            Delete the post. 
            </summary>
            <param name="alsoDeleteRemote">Boolean</param>
        </member>
        <member name="F:EncryptedMessaging.Message.Encrypted">
            <summary>
            Indicates whether this message was forwarded with encryption
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Message.Translation">
            <summary>
            Translation set for the chat with the recipent.
            </summary>
        </member>
        <member name="T:EncryptedMessaging.MessageFormat">
            <summary>
            Message settings set for the recpients.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.MessageFormat.#ctor(EncryptedMessaging.Context)">
            <summary>
            Set context for the message format.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:EncryptedMessaging.MessageFormat.MessageType">
            <summary>
            It is a numerator indicating the data type of the message. It is used to indicate what the transmitted or received data refers to. Each message can contain the data in a byte array, and the typo allows you to correctly reconstruct the message by taking the data.
            </summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.Text">
            <summary>Text in unicode format</summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.Image">
            <summary>An image</summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.Audio">
            <summary>An audio message mp3</summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.Contact">
            <summary>A contact to add to the address book</summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.AudioCall">
            <summary>Obsolete</summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.VideoCall">
            <summary>Obsolete</summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.Location">
            <summary>Geographic location</summary>            
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.PdfDocument">
            <summary>PDF document</summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.LastReading">
            <summary>Used to notify that messages have been read</summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.Delete">
            <summary>Asks to delete a message</summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.SmallData">
            <summary>Array of bytes[], Each bytes cannot exceed 256 bytes - Use the Functions.SplitIncomingData method to get the array</summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.Data">
            <summary>Array of bytes[] - Use the Functions.SplitIncomingData method to get the array</summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.NameChange">
            <summary>Used to send the name with which the contract is registered in my address book, so I can have notifications with the name used locally in my contacts</summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.ContactStatus">
            <summary>Used to check the status of the contact</summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.Binary">
            <summary>Message type that is used in form</summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.Inform">
            <summary>Used to send simple information (See the InformType enumerator for a list of the information it passes)</summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.PhoneContact">
            <summary>Contact stored on th phone </summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.StartAudioGroupCall">
            <summary>Obsolete</summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.StartVideoGroupCall">
            <summary>Obsolete</summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.EndCall">
            <summary>Obsolete</summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.DeclinedCall">
            <summary>Obsolete</summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.SubApplicationCommandWithData">
            <summary>
            Used to send commands for sub applications (plugins, modules, additional features): Each sub application has an ID and a command that must be sent with the messaging protocol.
            See: "<see cref="M:EncryptedMessaging.Messaging.SendCommandToSubApplication(EncryptedMessaging.Contact,System.UInt16,System.UInt16,System.Boolean,System.Boolean,System.Byte[])"/>"
            </summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.SubApplicationCommandWithParameters">
            <summary>
            Used to send commands for sub applications (plugins, modules, additional features): Each sub application has an ID and a command that must be sent with the messaging protocol.
            See: "<see cref="M:EncryptedMessaging.Messaging.SendCommandToSubApplication(EncryptedMessaging.Contact,System.UInt16,System.UInt16,System.Boolean,System.Boolean,System.Byte[][])"/>"
            </summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.ShareEncryptedContent">
            <inheritdoc cref="M:EncryptedMessaging.Messaging.ShareEncryptedContent(EncryptedMessaging.Contact,System.String,System.Byte[],System.String,System.String)"/>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageType.ReplyToMessage">
            <summary>Used internally to indicate that the message is a reply to another previous message</summary>
        </member>
        <member name="T:EncryptedMessaging.MessageFormat.InformType">
            <summary>
            Used to notify an event
            </summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.InformType.AvatarHasUpdated">
            <summary>This info is sent to the contact to inform me that my avatar has been changed</summary>
        </member>
        <member name="F:EncryptedMessaging.MessageFormat.MessageDescription">
            <summary>
            Useful for identifying which messages have a visual effect in the chat
            </summary>
        </member>
        <member name="M:EncryptedMessaging.MessageFormat.ReadDataPost(System.Byte[],System.UInt64,System.DateTime,EncryptedMessaging.Message@,System.Boolean)">
            <summary>
            Reads a post in binary format with the encrypted data and turns it into a clear message
            </summary>
            <param name="dataPost">Post in binary format</param>
            <param name="chatId">Chat Id</param>
            <param name="receptionTime">Reception Time UTC format</param>
            <param name="message"></param>
            <param name="isNewPost"></param>
        </member>
        <member name="M:EncryptedMessaging.MessageFormat.CreateDataPost(EncryptedMessaging.MessageFormat.MessageType,System.Byte[],System.Collections.Generic.List{System.Byte[]},System.DateTime@,System.Nullable{System.UInt64},System.Boolean)">
            <summary>
            This feature creates an encrypted post for chat participants. It must therefore be sent to the server in order to be distributed to all.
            </summary>
            <param name="type">Message type</param>
            <param name="data">Message data</param>
            <param name="participants">Public keys of each participant</param>
            <param name="creationDate">Return current time GTM</param>
            <param name="replyToPostId">The post Id property of the message you want to reply to</param>
            <param name="encrypted">if you need to send a message to someone who does not have the sender's contact in the address book, or the data is already encrypted, it is possible with this parameter to delete the encryption. Users are not allowed to receive unencrypted messages, this function is specific for messages to servers or cloud systems</param>		
            <returns>Data post</returns>
        </member>
        <member name="M:EncryptedMessaging.MessageFormat.CreateDataPostUnencrypted(EncryptedMessaging.MessageFormat.MessageType,System.Byte[],System.UInt64[],System.DateTime@,System.Nullable{System.UInt64})">
            <summary>
            This feature creates an unencrypted post for chat participants. It must therefore be sent to the server in order to be distributed to all.
            </summary>
            <param name="type">Message type</param>
            <param name="data">Message data</param>
            <param name="usersId">User ID of each participant</param>
            <param name="creationDate">Return current time GTM</param>
            <param name="replyToPostId">The post Id property of the message you want to reply to</param>
            <returns>Data post</returns>
        </member>
        <member name="T:EncryptedMessaging.Messaging">
            <summary>
            This class contains all the functions related to the messaging functionality for the users.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Messaging.#ctor(EncryptedMessaging.Context,System.Boolean)">
            <summary>
            Class initializer (prepares for use)
            </summary>
            <param name="context">Context</param>
            <param name="multipleChatModes">If false, one messaging chat will be handled at a time</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SetMultipleChatModes(System.Boolean)">
            <summary>
            By default set to false, as only one messaging chat is handled.
            </summary>
            <param name="value">Boolean</param>
        </member>
        <member name="P:EncryptedMessaging.Messaging.CurrentChatRoom">
            <summary>
            Get the current chat group and set the time of last viewed and if message read.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Messaging.ShowPost(System.Byte[],System.UInt64,System.DateTime,System.Action{EncryptedMessaging.Message,System.Boolean})">
            <summary>
            if showMessage is null, add a post on the chat page, otherwise it executes the method showMessage that is passed.
            </summary>
            <param name="dataPost">the encrypted message</param>
            <param name="chatId">id of chat</param>
            <param name="receptionTime">Date of receipt of the message. This data must be passed to be included in the message object</param>
            <param name="showMessage">Action that must be performed for each message read, the action has two parameters: The message object is a boolean value that indicates if the message is mine (generated by me). If this value is omitted then the message display method of the host system will be used which is set when the context is initialized (the rendering engine of the user interface that displays messages in the chat).</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.ShowMessage(EncryptedMessaging.Message,System.Boolean)">
            <summary>
            Add a post on the chat page.
            </summary>
            <param name="message">the message to show</param>
            <param name="isMy">He has to render my message</param>
        </member>
        <member name="F:EncryptedMessaging.Messaging.SendMessageParameters.Type">
            <summary>The type of data</summary>
        </member>
        <member name="F:EncryptedMessaging.Messaging.SendMessageParameters.Data">
            <summary>The body of the data in binary format</summary>
        </member>
        <member name="F:EncryptedMessaging.Messaging.SendMessageParameters.ToContact">
            <summary>Recipient of the message. ToContact and toIdUsers cannot be set simultaneousl</summary>
        </member>
        <member name="F:EncryptedMessaging.Messaging.SendMessageParameters.ReplyToPostId">
            <summary>The post Id property of the message you want to reply to</summary>
        </member>
        <member name="F:EncryptedMessaging.Messaging.SendMessageParameters.ChatId">
            <summary>Set this value if toContact is null, that is, if the message is not encrypted</summary>
        </member>
        <member name="F:EncryptedMessaging.Messaging.SendMessageParameters.ToIdUsers">
            <summary>Id of the members of the group the message is intended for. ToContact and toIdUsers cannot be set simultaneously</summary>
        </member>
        <member name="F:EncryptedMessaging.Messaging.SendMessageParameters.DirectlyWithoutSpooler">
            <summary>If this parameter is true, the data will be sent immediately without any reception check, if the recipient is not on-line they will be lost</summary>
        </member>
        <member name="F:EncryptedMessaging.Messaging.SendMessageParameters.Encrypted">
            <summary>Clients are only able to receive encrypted messages. Non-encrypted messages are reserved for communications with cloud servers if the data is already encrypted and does not require a second encryption and if the message must be delivered to a server that does not have the client in the address book and therefore could not otherwise read it</summary>
        </member>
        <member name="F:EncryptedMessaging.Messaging.SendMessageParameters.IsLogin">
            <summary>Avoid a recursive loop for the login message</summary>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendMessage(EncryptedMessaging.MessageFormat.MessageType,System.Byte[],EncryptedMessaging.Contact,System.Nullable{System.UInt64},System.Nullable{System.UInt64},System.UInt64[],System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Send the message to all participants in the current chat room, and save a copy of the local storage
            </summary>
            <param name="type">The type of data</param>
            <param name="data">The body of the data in binary format</param>
            <param name="toContact">Recipient of the message. ToContact and toIdUsers cannot be set simultaneousl</param>
            <param name="replyToPostId">The post Id property of the message you want to reply to</param>
            <param name="chatId">Set this value if toContact is null, that is, if the message is not encrypted</param>
            <param name="toIdUsers">Id of the members of the group the message is intended for. ToContact and toIdUsers cannot be set simultaneously</param>
            <param name="directlyWithoutSpooler">If this parameter is true, the data will be sent immediately without any reception check, if the recipient is not on-line they will be lost</param>
            <param name="encrypted">Clients are only able to receive encrypted messages. Non-encrypted messages are reserved for communications with cloud servers if the data is already encrypted and does not require a second encryption and if the message must be delivered to a server that does not have the client in the address book and therefore could not otherwise read it</param>
            <param name="isLogin">Flad used only for the login command to avoid a recursive loop</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.OnDataDeliveryConfirm(System.UInt32)">
            <summary>
            It is executed when the server confirms that it has received a message
            </summary>
            <param name="dataId"></param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendText(System.String,EncryptedMessaging.Contact,System.Nullable{System.UInt64})">
            <summary>
            Send a text
            </summary>
            <param name="text">The text to send</param>
            <param name="toContact">The recipient</param>
            <param name="replyToPostId">The post Id property of the message you want to reply to</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendPicture(System.Byte[],EncryptedMessaging.Contact,System.Nullable{System.UInt64})">
            <summary>
            For images, the only format allowed is PNG. The longest side of the image must not exceed 800 pixels, for example 800 X 480, or 480 X 800 (in no case any side must exceed 800 pixels in length)
            </summary>
            <param name="png">PNG file, maximum side size = 800 pix</param>
            <param name="toContact">The recipient</param>
            <param name="replyToPostId">The post Id property of the message you want to reply to</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendInfo(EncryptedMessaging.MessageFormat.InformType,EncryptedMessaging.Contact,System.Nullable{System.UInt64},System.UInt64[],System.Boolean,System.Boolean)">
            <summary>
            Send a info
            </summary>
            <param name="inform">Info type</param>
            <param name="toContact">The recipient</param>
            <param name="chatId">Set this value if toContact is null, that is, if the message is not encrypted</param>
            <param name="toIdUsers">Id of the members of the group the message is intended for. ToContact and toIdUsers cannot be set simultaneously</param>
            <param name="directlyWithoutSpooler">If this parameter is true, the data will be sent immediately without any reception check, if the recipient is not on-line they will be lost</param>
            <param name="encrypted">Clients are only able to receive encrypted messages. Non-encrypted messages are reserved for communications with cloud servers if the data is already encrypted and does not require a second encryption and if the message must be delivered to a server that does not have the client in the address book and therefore could not otherwise read it</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendBinary(EncryptedMessaging.Contact,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            Send a binary data block
            To read the data on the target client/server: var values = Functions.SplitData(true,data);
            </summary>
            <param name="toContact">The recipient</param>
            <param name="binaryData">Binary data block to send</param>
            <param name="directlyWithoutSpooler">If this parameter is true, the data will be sent immediately without any reception check, if the recipient is not on-line they will be lost</param>
            <param name="encrypted">Clients are only able to receive encrypted messages. Non-encrypted messages are reserved for communications with cloud servers if the data is already encrypted and does not require a second encryption and if the message must be delivered to a server that does not have the client in the address book and therefore could not otherwise read it</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendBinaryUnencrypetd(System.UInt64,System.UInt64[],System.Byte[],System.Boolean)">
            <summary>
            Send a binary unencrypted (Clients are only able to receive encrypted messages: do not use this command to send messages to communicate between clients)
            To read the data on the target client/server: var values = Functions.SplitData(true,data);
            </summary>
            <param name="toIdUsers">The recipients</param>
            <param name="binaryData">Binary data block to send</param>
            <param name="chatId">Id of the chat</param>
            <param name="directlyWithoutSpooler">If this parameter is true, the data will be sent immediately without any reception check, if the recipient is not on-line they will be lost</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendSmallData(EncryptedMessaging.Contact,System.Boolean,System.Boolean,System.Byte[][])">
            <summary>
            Send array of bytes, not exceeding 255 bytes
            To read the data on the target client: var values = Functions.SplitData(true,data);
            </summary>
            <param name="toContact">The recipient</param>
            <param name="directlyWithoutSpooler">If this parameter is true, the data will be sent immediately without any reception check, if the recipient is not on-line they will be lost</param>
            <param name="encrypted">Clients are only able to receive encrypted messages. Non-encrypted messages are reserved for communications with cloud servers if the data is already encrypted and does not require a second encryption and if the message must be delivered to a server that does not have the client in the address book and therefore could not otherwise read it</param>
            <param name="values">Data blocks not exceeding 255 bytes each</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendData(EncryptedMessaging.Contact,System.Boolean,System.Boolean,System.Byte[][])">
            <summary>
            Send array of bytes
            To read the data on the target client: var values = Functions.SplitData(false,data);
            </summary>
            <param name="toContact">The recipient</param>
            <param name="directlyWithoutSpooler">If this parameter is true, the data will be sent immediately without any reception check, if the recipient is not on-line they will be lost</param>
            <param name="encrypted">Clients are only able to receive encrypted messages. Non-encrypted messages are reserved for communications with cloud servers if the data is already encrypted and does not require a second encryption and if the message must be delivered to a server that does not have the client in the address book and therefore could not otherwise read it</param>
            <param name="values">Data blocks not exceeding 255 bytes each</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendSmallDataToCloud(EncryptedMessaging.Contact,System.Boolean,System.Boolean,System.Byte[][])">
            <summary>
            Send array of bytes, not exceeding 255 bytes
            To read the data on the target client: var values = Functions.SplitData(data);
            </summary>
            <param name="cloud">Cloud contact</param>
            <param name="directlyWithoutSpooler">If this parameter is true, the data will be sent immediately without any reception check, if the recipient is not on-line they will be lost</param>
            <param name="encrypted">Clients are only able to receive encrypted messages. Non-encrypted messages are reserved for communications with cloud servers if the data is already encrypted and does not require a second encryption and if the message must be delivered to a server that does not have the client in the address book and therefore could not otherwise read it</param>
            <param name="values">Data blocks not exceeding 255 bytes each</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendKeyValueCollection(EncryptedMessaging.Contact,System.Boolean,System.Tuple{System.Byte,System.Byte[]}[])">
            <summary>
            Sends a sequence of key-values, where the key is a byte and the value is an array of 256 bytes
            To read the data on the target client: var values = Functions.SplitData(data);
            </summary>
            <param name="toContact">The recipient</param>
            <param name="directlyWithoutSpooler">If this parameter is true, the data will be sent immediately without any reception check, if the recipient is not on-line they will be lost</param>
            <param name="keyValue">Data blocks not exceeding 255 bytes each</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendKeyValueCollection(EncryptedMessaging.Contact,System.Boolean,System.Boolean,System.Tuple{System.Byte,System.Byte[]}[])">
            <summary>
            Sends a sequence of key-values, where the key is a byte and the value a byte array
            To read the data on the target client: var values = Functions.SplitData(data);
            </summary>
            <param name="toContact">The recipient</param>
            <param name="directlyWithoutSpooler">If this parameter is true, the data will be sent immediately without any reception check, if the recipient is not on-line they will be lost</param>
            <param name="valueMustBeLessOf256Bytes">If true: Ideal for saving values no larger than 256 bytes</param>
            <param name="keyValue">Data blocks of data</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendKeyValueCollectionToCloud(EncryptedMessaging.Contact,System.Boolean,System.Tuple{System.Byte,System.Byte[]}[])">
            <summary>
            Sends a sequence of key-values, where the key is a byte and the value is an array of max 256 bytes
            To read the data on the target client: var values = Functions.SplitData(data);
            </summary>
            <param name="toContact">The recipient</param>
            <param name="directlyWithoutSpooler">If this parameter is true, the data will be sent immediately without any reception check, if the recipient is not on-line they will be lost</param>
            <param name="keyValue">Data blocks not exceeding 255 bytes each</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendKeyValueCollectionToCloud(EncryptedMessaging.Contact,System.Boolean,System.Boolean,System.Tuple{System.Byte,System.Byte[]}[])">
            <summary>
            Sends a sequence of key-values, where the key is a byte and the value is an array of bytes
            To read the data on the target client: var values = Functions.SplitData(data);
            </summary>
            <param name="toContact">The recipient</param>
            <param name="directlyWithoutSpooler">If this parameter is true, the data will be sent immediately without any reception check, if the recipient is not on-line they will be lost</param>
            <param name="valueMustBeLessOf256Bytes">Limits the length of the saved values by saving communication bandwidth for data which is generally small</param>
            <param name="keyValue">Data blocks, not exceeding 255 bytes each, if specified by the valueMustBeLessOf256Bytes parameter</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.LoginToServer(System.Boolean,EncryptedMessaging.Contact)">
            <summary>
            The servers don't have the client's public key because they don't have the contact list. The login consists in sending your contact to the server, so that it can have the public key to communicate in encrypted form.
            If there are no more communications, the server will automatically remove the contact, so in the future it will be necessary to log in again
            </summary>
            <param name="directlyWithoutSpooler">If this parameter is true, the data will be sent immediately without any reception check, if the recipient is not on-line they will be lost</param>
            <param name="onServer">Server to login</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendAudio(System.Byte[],EncryptedMessaging.Contact,System.Nullable{System.UInt64})">
            <summary>
            The only type of audio file allowed is mp3, with a speed of 64 k bps or lower.
            </summary>
            <param name="mp3">mp3 64 kbps file</param>
            <param name="toContact">The recipient</param>
            <param name="replyToPostId">The post Id property of the message you want to reply to</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendContact(EncryptedMessaging.Contact,EncryptedMessaging.Contact,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            The only type of audio file allowed is mp3, with a speed of 64 k bps or lower.
            </summary>
            <param name="contact">mp3 64 kbps file</param>
            <param name="toContact">The recipient</param>
            <param name="directlyWithoutSpooler"></param>
            <param name="purposeIsUpdateOnly"></param>
            <param name="isLogin">Flad used only for the login command to avoid a recursive loop</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.NotifyContactNameChange(EncryptedMessaging.Contact)">
            <summary>
            // I send the name with which the contract is registered in my address book, so I can have notifications with the name used locally in my contacts
            </summary>
            <param name="toContact">The recipient</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendContactStatus(EncryptedMessaging.Contact)">
            <summary>
            
            </summary>
            <param name="toContact"></param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendLastReading(EncryptedMessaging.Contact)">
            <summary>
            Send last reading
            </summary>
            <param name="toContact">The recipient</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendAudioCall(System.Byte[],EncryptedMessaging.Contact)">
            <summary>
            The only type of audio file allowed is mp3, with a speed of 64 k bps or lower.
            </summary>
            <param name="call">audio call</param>
            <param name="toContact">The recipient</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendVideoCall(System.Byte[],EncryptedMessaging.Contact)">
            <summary>
            The only type of audio file allowed is mp3, with a speed of 64 k bps or lower.
            </summary>
            <param name="call">audio call</param>
            <param name="toContact">The recipient</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendStartAudioGroupCall(System.Byte[],EncryptedMessaging.Contact)">
            <summary>
            Start a group audio call for the chat room.
            </summary>
            <param name="call">Audio call</param>
            <param name="toContact">The recipients</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendStartVideoGroupCall(System.Byte[],EncryptedMessaging.Contact)">
            <summary>
            Start a group video call for the chat room.
            </summary>
            <param name="call">Video call</param>
            <param name="toContact">The recipients</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendEndCall(System.Byte[],EncryptedMessaging.Contact)">
            <summary>
             End a group call for the chat room.
            </summary>
            <param name="call">Audio/Video call</param>
            <param name="toContact">The recipient</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendDeclinedCall(System.Byte[],EncryptedMessaging.Contact)">
            <summary>
            Decline a call from the recipent.
            </summary>
            <param name="call"></param>
            <param name="toContact"></param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendLocation(System.Double,System.Double,EncryptedMessaging.Contact,System.Nullable{System.UInt64})">
            <summary>
            Submit a geographic location
            </summary>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="toContact"></param>
            <param name="replyToPostId"></param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendPdfDocument(System.Byte[],EncryptedMessaging.Contact,System.Nullable{System.UInt64})">
            <summary>
            Send a document of the format pdf.
            </summary>
            <param name="document">file to send</param>
            <param name="toContact">The recipient</param>
            <param name="replyToPostId"></param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendPhoneContact(System.Byte[],EncryptedMessaging.Contact,System.Nullable{System.UInt64})">
            <summary>
            Send a contact card to the recipent 
            </summary>
            <param name="phoneContact">Contact card</param>
            <param name="toContact"> The recipient</param>
            <param name="replyToPostId"></param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendCommandToSubApplication(EncryptedMessaging.Contact,System.UInt16,System.UInt16,System.Boolean,System.Boolean,System.Byte[][])">
            <summary>
            This command allows sub-applications (plugins, modules, extensions) to send commands with parameters. Use the "<see cref="M:EncryptedMessaging.Message.GetSubApplicationCommandWithParameters(System.UInt16@,System.UInt16@,System.Collections.Generic.List{System.Byte[]}@)"/>" method of the Message class to read this command on the receiving device
            </summary>
            <param name="toContact">Recipient</param>
            <param name="appId">Sub application Id (plugin Id)</param>
            <param name="command">Id of the command used in the protocol of the sub application</param>
            <param name="directlyWithoutSpooler">If this parameter is true, the data will be sent immediately without any reception check, if the recipient is not on-line they will be lost</param>
            <param name="encrypted">Clients are only able to receive encrypted messages. Non-encrypted messages are reserved for communications with cloud servers if the data is already encrypted and does not require a second encryption and if the message must be delivered to a server that does not have the client in the address book and therefore could not otherwise read it</param>
            <param name="values">Data blocks (Command parameters to use in the plugin or extension). NOTE: If you intend to send single data (not an array of parameters), use the other overload</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.SendCommandToSubApplication(EncryptedMessaging.Contact,System.UInt16,System.UInt16,System.Boolean,System.Boolean,System.Byte[])">
            <summary>
            This command allows sub-applications (plugins, modules, extensions) to send commands with data. Use the "<see cref="M:EncryptedMessaging.Message.GetSubApplicationCommandWithData(System.UInt16@,System.UInt16@,System.Byte[]@)"/>" method of the Message class to read this command on the receiving device
            </summary>
            <param name="toContact">Recipient</param>
            <param name="appId">Sub application Id (plugin Id)</param>
            <param name="command">Id of the command used in the protocol of the sub application</param>
            <param name="directlyWithoutSpooler">If this parameter is true, the data will be sent immediately without any reception check, if the recipient is not on-line they will be lost</param>
            <param name="encrypted">Clients are only able to receive encrypted messages. Non-encrypted messages are reserved for communications with cloud servers if the data is already encrypted and does not require a second encryption and if the message must be delivered to a server that does not have the client in the address book and therefore could not otherwise read it</param>
            <param name="data">Data relating to the command sent. NOTE: if you intend to send an array of data, use the other overload</param>
        </member>
        <member name="M:EncryptedMessaging.Messaging.ShareEncryptedContent(EncryptedMessaging.Contact,System.String,System.Byte[],System.String,System.String)">
            <summary>
            Share encrypted content on the server with other contacts. Use the "<see cref="M:EncryptedMessaging.Message.GetShareEncryptedContentData(System.String@,System.Byte[]@,System.String@,System.String@)"/>" method of the Message class to read this command on the receiving device
            </summary>
            <param name="toContact">Recipient</param>
            <param name="contentType">Three characters describing the type of content being shared. Use the three characters of the file expansion, for example: MP4, DOC, PDF, ISO, etc ...</param>
            <param name="privateKey">The private key to decrypt the content</param>
            <param name="description">Literal description of content</param>
            <param name="serverUrl">The URL (max 256 char) of the server where the shared content resides. The name of the file is not necessary because it is obtained from the private key. If this value is allowed, then the server will be the default one</param>
        </member>
        <member name="T:EncryptedMessaging.My">
            <summary>
            This class allows you to access all the information about the user who is using the application: the contact, if his cryptographic keys, the tokens of his device for notifications, the user id, etc.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.My.Contact">
            <summary>
            Gets my contact (the contact of the user using the application)
            </summary>
        </member>
        <member name="P:EncryptedMessaging.My.Csp">
            <summary>
            Return a CSP of current user
            </summary>
            <returns></returns>
        </member>
        <member name="P:EncryptedMessaging.My.IsServer">
            <summary>
            Boolean set for the Server parameter.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.My.GetPublicKey">
            <summary>
            Return the public key of current user in base64 format
            </summary>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.My.GetPublicKeyBinary">
            <summary>
            Return the public key of current user in binary format (array of byte)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.My.GetPrivatKeyBinary">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.My.GetId">
            <summary>
            My user id (deprecated).
            </summary>
            <returns></returns>
        </member>
        <member name="P:EncryptedMessaging.My.Id">
            <summary>
            My user id.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.My.Name">
            <summary>
            Set or get the current username, the data is saved on the cloud in an anonymous and encrypted way if an application usage limit is exceeded.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.My.SetName(System.String,System.Boolean)">
            <summary>
            Set the current username, if saveToCloud is true, the data is saved on the cloud in an anonymous and encrypted way if an application usage limit is exceeded.
            </summary>
            <param name="name">Name</param>
            <param name="saveToCloud">if saveToCloud is true, the data is saved on the cloud in an anonymous and encrypted way if an application usage limit is exceeded.</param>
        </member>
        <member name="P:EncryptedMessaging.My.FirebaseToken">
            <summary>
            It is used by firebase, to send notifications to a specific device. The sender needs this information to make the notification appear to the recipient.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.My.DeviceToken">
            <summary>
            In ios this is used to generate notifications for the device. Whoever sends the encrypted message needs this data to generate a notification on the device of who will receive the message.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.My.GetPrivateKey">
            <summary>
            Return the private key stored in the device,if not present, it generates one
            </summary>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.My.GetPassphrase">
            <summary>
            Gets the combination of words that allow you to recover the account using bitcoin technology
            </summary>
            <returns>Passphrase</returns>
        </member>
        <member name="M:EncryptedMessaging.My.SetPrivateKey(System.String)">
            <summary>
            Set the private key and save safely or save the passphrase if you passed this as a parameter
            </summary>
        </member>
        <member name="M:EncryptedMessaging.My.GetAvatar">
            <summary>
            Gets the avatar (the image of the user photo in the form of a byte array)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.My.SetAvatar(System.Byte[],System.Boolean)">
            <summary>
            Sets the avatar (the image of the user photo in the form of a byte array)
            </summary>
            <param name="png"></param>
            <param name="saveToCloud">Save the avatar to cloud (if the library use a cloud)</param>
        </member>
        <member name="M:EncryptedMessaging.My.BackupToCloud">
            <summary>
            Backup my name
            When the account is recovered with the passphrase, the name is recovered.
            Account recovery is done by resetting the passphrase. This is the routine that is performed following the restore when the cloud sends the name used <see cref="!:ProcessResponsesFromCloud.OnData(Context, string, string, byte[])">OnData</see>
            </summary>
        </member>
        <member name="F:EncryptedMessaging.My.NeedUpdateTheNotificationKeyToMyContacts">
            <summary>
            If the value has changed then we set a flag that will allow us to transmit the new value to all our contacts when the contact list is loaded
            </summary>
        </member>
        <member name="M:EncryptedMessaging.My.UpdateTheNotificationKeyToMyContacts">
            <summary>
            Update my data held to my contacts when necessary.
            When my device id or firebase id change (for non-application dependent events), an update is sent to my contacts so they can continue to notify me when they send me communications and messages
            </summary>
        </member>
        <member name="T:EncryptedMessaging.Repository">
            <summary>
            This library provides functions to retrieve messages on the server and store them locally.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Repository.#ctor(EncryptedMessaging.Context)">
            <summary>
            Display libraries used as read only.
            </summary>
            <param name="context"></param>
        </member>
        <member name="F:EncryptedMessaging.Repository.MaxPostLength">
            <summary>
            Set maximum post length to 20 MB.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Repository.AddPost(System.Byte[],System.UInt64,System.DateTime@)">
            <summary>
            Add the encrypted post to local storage and return the reception date
            </summary>
            <param name="dataByteArray"></param>
            <param name="chatId"></param>
            <param name="receptionDate">return reception date</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Repository.ReadPosts(System.UInt64,System.Action{System.Byte[],System.DateTime},System.DateTime,System.Nullable{System.Int32},System.Collections.Generic.List{System.DateTime})">
            <summary>
            Read all posts of a given chat and perform an action. If no action is specified, then the default action will be to show messages in the chat
            </summary>
            <param name="chatId">The id of the chat whose posts you want to read</param>
            <param name="action">Action to be performed for each post, the byte[] is binary data of the encrypted post that is read from the repository, DateTime is the time the post was received which you can use as a unique ID (you can use the ticks property of DateTime as a unique id ) </param>
            <param name="receprionAntecedent">If set, consider only posts that are dated before the value indicated. It is useful for paginating messages in the chat view, or for telling the loading of messages in blocks. How to use this parameter: You need to store the date of the oldest message that is displayed in the chat, when you want to load a second block of messages you have to pass this date in order to get the next block</param>
            <param name="take">Limit the number of messages to take. If not set, the value set in the Context.Setting.MessagePagination settings will be used. Pass the Context.Setting.KeepPost value to process all messages!</param>
            <param name="exclude">List of posts to exclude using the received date as a filter</param>
            <returns>Returns the date of arrival of the oldest message processed by the function. Use this value to page further requests by passing the "receprionAntecedent" parameter.</returns>
        </member>
        <member name="M:EncryptedMessaging.Repository.ReadLastPost(System.UInt64,System.DateTime@)">
            <summary>
            Get the last post written in a given chat
            </summary>
            <param name="chatId">The ID of the chat for which you want to get the last post</param>
            <param name="receptionDateTime">It also returns the date and time when the post was received</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Repository.GetLastMessageViewable(System.UInt64,System.DateTime@)">
            <summary>
            Gets the last visible post (which can be viewed in the chat, therefore system messages that do not produce anything visible are excluded)
            </summary>
            <param name="chatId">The ID of the chat for which you want to get the last message</param>
            <param name="receptionDateTime">It also returns the date and time when the message was received</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Repository.ReadPost(System.DateTime,System.UInt64)">
            <summary>
            Read a post in the chat having the time to receive
            </summary>
            <param name="receptionDateTime">The reception time is used as the identifier of the message to formulate the request</param>
            <param name="chatId">The chat in which you want to search</param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Repository.ReadPostByPostId(System.UInt64,System.UInt64)">
            <summary>
            Read a post given its ID
            </summary>
            <param name="postId">The identifier of the post you want to read</param>
            <param name="chatId">The chat in which to search for the post, identified by the chat ID</param>
            <returns>If the post you are looking for is not found, null is returned</returns>
        </member>
        <member name="M:EncryptedMessaging.Repository.DeletePost(System.DateTime,EncryptedMessaging.Contact)">
            <summary>
            Permanently delete a post saved in storage
            </summary>
            <param name="receptionDateTime">The date of receipt of the post you want to delete</param>
            <param name="contact">The conversation group (contact) in which the post was written</param>
        </member>
        <member name="M:EncryptedMessaging.Repository.DeletePostByPostId(System.UInt64,System.UInt64)">
            <summary>
            Delete a post given its identifier
            </summary>
            <param name="postId"></param>
            <param name="chatId">The chat in which to search for the post, identified by the chat ID</param>
        </member>
        <member name="M:EncryptedMessaging.Repository.DeletePostByPostId(System.UInt64,EncryptedMessaging.Contact)">
            <summary>
            Delete a post given its Post Id.
            </summary>
            <param name="postId">Delete a post given its identifier</param>
            <param name="contact">The chat in which to search for the post, identified by the contact</param>
        </member>
        <member name="M:EncryptedMessaging.Repository.ClearPosts(EncryptedMessaging.Contact)">
            <summary>
            Erase all content in a chat
            </summary>
            <param name="contact">The contact representing the chat you want to reset</param>
        </member>
        <member name="M:EncryptedMessaging.Repository.GetDateTimeOfData(System.Byte[])">
            <summary>
            Get the Date and time of the data from the byte array.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Repository.GetTimestampOfData(System.Byte[])">
            <summary>
            Get time stamp from the byte array.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:EncryptedMessaging.Repository.PostId(System.Byte[])">
            <summary>
            Convert the  byte array to Unsigned 64 integer if length is satsifed by the condition.
            </summary>
            <param name="dataPost"></param>
            <returns></returns>
        </member>
        <member name="T:EncryptedMessaging.Resources.Dictionary_de">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.About">
            <summary>
              Looks up a localized string similar to Über.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Add">
            <summary>
              Looks up a localized string similar to Hinzufügen.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Ago">
            <summary>
              Looks up a localized string similar to vor.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Alert">
            <summary>
              Looks up a localized string similar to Alarm.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Audio">
            <summary>
              Looks up a localized string similar to audio-.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.AudioCall">
            <summary>
              Looks up a localized string similar to Audioanruf.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Cancel">
            <summary>
              Looks up a localized string similar to Abbrechen.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Contact">
            <summary>
              Looks up a localized string similar to Kontakt.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Contacts">
            <summary>
              Looks up a localized string similar to Kontakte.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.CreateAccount">
            <summary>
              Looks up a localized string similar to Neuen Account erstellen.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Data">
            <summary>
              Looks up a localized string similar to daten.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Day">
            <summary>
              Looks up a localized string similar to tag.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Days">
            <summary>
              Looks up a localized string similar to tage.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Delete">
            <summary>
              Looks up a localized string similar to Löschen.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Document">
            <summary>
              Looks up a localized string similar to Dokumentieren.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Edit">
            <summary>
              Looks up a localized string similar to Bearbeiten.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.EditPrivateKey">
            <summary>
              Looks up a localized string similar to Privaten Schlüssel bearbeiten.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Exit">
            <summary>
              Looks up a localized string similar to Ausgang.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.FunctionNotSupported">
            <summary>
              Looks up a localized string similar to Funktion nicht unterstützt.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Hour">
            <summary>
              Looks up a localized string similar to stunde.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Hours">
            <summary>
              Looks up a localized string similar to std.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Image">
            <summary>
              Looks up a localized string similar to bild.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Info">
            <summary>
              Looks up a localized string similar to Wir sind anonym. Wir sind eine Legion. Wir vergeben nicht. Wir vergessen nicht. Erwarte uns!.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.InvalidKey">
            <summary>
              Looks up a localized string similar to Schlüssel ungültig!.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.InvalidPassphrase">
            <summary>
              Looks up a localized string similar to Ungültige Passphrase.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.InvalidValue">
            <summary>
              Looks up a localized string similar to Wert nicht gültig!.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.just_now">
            <summary>
              Looks up a localized string similar to Grade eben.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.MessageDeleted">
            <summary>
              Looks up a localized string similar to Nachricht gelöscht.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Minutes">
            <summary>
              Looks up a localized string similar to Protokoll.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Name">
            <summary>
              Looks up a localized string similar to Kontaktname.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.NewContact">
            <summary>
              Looks up a localized string similar to Neuer Kontakt.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.NewMessage">
            <summary>
              Looks up a localized string similar to Sie haben eine neue Nachricht erhalten.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Ok">
            <summary>
              Looks up a localized string similar to Okay.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.OpenSource">
            <summary>
              Looks up a localized string similar to Open Source.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Position">
            <summary>
              Looks up a localized string similar to Position.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.PublicKey">
            <summary>
              Looks up a localized string similar to Öffentlicher Schlüssel.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Remove">
            <summary>
              Looks up a localized string similar to Entfernen.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.RestoreAccount">
            <summary>
              Looks up a localized string similar to Konto per Passphrase wiederherstellen.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Save">
            <summary>
              Looks up a localized string similar to Speichern.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Search">
            <summary>
              Looks up a localized string similar to Suche.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Send">
            <summary>
              Looks up a localized string similar to Senden.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Share">
            <summary>
              Looks up a localized string similar to Teilen.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.ShowPassphrase">
            <summary>
              Looks up a localized string similar to Passphrase anzeigen.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.Social">
            <summary>
              Looks up a localized string similar to Sozial.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.StrictlyConfidentialMessage">
            <summary>
              Looks up a localized string similar to Streng vertrauliche Nachricht.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.TextMessage">
            <summary>
              Looks up a localized string similar to Textnachricht.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.TooManyParticipants">
            <summary>
              Looks up a localized string similar to Es wurden zu viele Teilnehmer hinzugefügt.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.VideoCall">
            <summary>
              Looks up a localized string similar to Videoanruf.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_de.WrongPassphrase">
            <summary>
              Looks up a localized string similar to Falsche Passphrase.
            </summary>
        </member>
        <member name="T:EncryptedMessaging.Resources.Dictionary">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.About">
            <summary>
              Looks up a localized string similar to About.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Add">
            <summary>
              Looks up a localized string similar to Add.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Ago">
            <summary>
              Looks up a localized string similar to ago.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Alert">
            <summary>
              Looks up a localized string similar to Alert.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Audio">
            <summary>
              Looks up a localized string similar to audio.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.AudioCall">
            <summary>
              Looks up a localized string similar to Audio call.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.CallDeclined">
            <summary>
              Looks up a localized string similar to Call Declined.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.CallEnded">
            <summary>
              Looks up a localized string similar to Call Ended.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Cancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Contact">
            <summary>
              Looks up a localized string similar to Contact.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Contacts">
            <summary>
              Looks up a localized string similar to Contacts.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.CreateAccount">
            <summary>
              Looks up a localized string similar to Create new account.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Data">
            <summary>
              Looks up a localized string similar to data.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Day">
            <summary>
              Looks up a localized string similar to day.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Days">
            <summary>
              Looks up a localized string similar to days.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Delete">
            <summary>
              Looks up a localized string similar to Delete.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Document">
            <summary>
              Looks up a localized string similar to Document.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Edit">
            <summary>
              Looks up a localized string similar to Edit.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.EditPrivateKey">
            <summary>
              Looks up a localized string similar to Edit private key.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.EncryptedSharedContent">
            <summary>
              Looks up a localized string similar to Encrypted shared content.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Exit">
            <summary>
              Looks up a localized string similar to Exit.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.FunctionNotSupported">
            <summary>
              Looks up a localized string similar to Function not supported.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Hour">
            <summary>
              Looks up a localized string similar to hour.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Hours">
            <summary>
              Looks up a localized string similar to hours.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Image">
            <summary>
              Looks up a localized string similar to image.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Info">
            <summary>
              Looks up a localized string similar to We are Anonymous. We are legion. We do not forgive. We do not forget. Expect us!.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.InvalidKey">
            <summary>
              Looks up a localized string similar to Key not valid!.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.InvalidPassphrase">
            <summary>
              Looks up a localized string similar to Invalid passphrase.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.InvalidValue">
            <summary>
              Looks up a localized string similar to Value not valid!.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.JustNow">
            <summary>
              Looks up a localized string similar to Just now.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.MessageDeleted">
            <summary>
              Looks up a localized string similar to Message deleted.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Minutes">
            <summary>
              Looks up a localized string similar to Minutes.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Name">
            <summary>
              Looks up a localized string similar to Contact name.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.NewContact">
            <summary>
              Looks up a localized string similar to New contact.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.NewMessage">
            <summary>
              Looks up a localized string similar to You have received a new message.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Ok">
            <summary>
              Looks up a localized string similar to Ok.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.OpenSource">
            <summary>
              Looks up a localized string similar to Open source.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Position">
            <summary>
              Looks up a localized string similar to Position.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.PublicKey">
            <summary>
              Looks up a localized string similar to Public key.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Remove">
            <summary>
              Looks up a localized string similar to Remove.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.RestoreAccount">
            <summary>
              Looks up a localized string similar to Restore account by passphrase.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Save">
            <summary>
              Looks up a localized string similar to Save.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Search">
            <summary>
              Looks up a localized string similar to Search.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Send">
            <summary>
              Looks up a localized string similar to Send.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Share">
            <summary>
              Looks up a localized string similar to Share.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.ShowPassphrase">
            <summary>
              Looks up a localized string similar to Show passphrase.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.Social">
            <summary>
              Looks up a localized string similar to Social.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.StrictlyConfidentialMessage">
            <summary>
              Looks up a localized string similar to Strictly confidential message.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.TextMessage">
            <summary>
              Looks up a localized string similar to Text message.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.TooManyParticipants">
            <summary>
              Looks up a localized string similar to Too many participants have been added.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.VideoCall">
            <summary>
              Looks up a localized string similar to Video call.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary.WrongPassphrase">
            <summary>
              Looks up a localized string similar to Wrong passphrase.
            </summary>
        </member>
        <member name="T:EncryptedMessaging.Resources.Dictionary_es">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.About">
            <summary>
              Looks up a localized string similar to Sobre.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Add">
            <summary>
              Looks up a localized string similar to Agregar.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Ago">
            <summary>
              Looks up a localized string similar to atrás.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Alert">
            <summary>
              Looks up a localized string similar to Alerta.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Audio">
            <summary>
              Looks up a localized string similar to audio.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.AudioCall">
            <summary>
              Looks up a localized string similar to Llamada de audio.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Cancel">
            <summary>
              Looks up a localized string similar to Cancelar.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Contact">
            <summary>
              Looks up a localized string similar to Contacto.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Contacts">
            <summary>
              Looks up a localized string similar to Contactos.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.CreateAccount">
            <summary>
              Looks up a localized string similar to Crear una nueva cuenta.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Data">
            <summary>
              Looks up a localized string similar to datos.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Day">
            <summary>
              Looks up a localized string similar to día.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Days">
            <summary>
              Looks up a localized string similar to dias.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Delete">
            <summary>
              Looks up a localized string similar to Borrar.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Document">
            <summary>
              Looks up a localized string similar to Documento.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Edit">
            <summary>
              Looks up a localized string similar to Editar.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.EditPrivateKey">
            <summary>
              Looks up a localized string similar to Editar clave privada.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Exit">
            <summary>
              Looks up a localized string similar to Salida.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.FunctionNotSupported">
            <summary>
              Looks up a localized string similar to Función no admitida.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Hour">
            <summary>
              Looks up a localized string similar to hora.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Hours">
            <summary>
              Looks up a localized string similar to horas.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Image">
            <summary>
              Looks up a localized string similar to imagen.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Info">
            <summary>
              Looks up a localized string similar to Somos anónimos. Somos legión. Nosotros no perdonamos. No olvidamos. ¡Esperanos!.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.InvalidKey">
            <summary>
              Looks up a localized string similar to ¡Clave no válida!.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.InvalidPassphrase">
            <summary>
              Looks up a localized string similar to Frase de contraseña no válida.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.InvalidValue">
            <summary>
              Looks up a localized string similar to ¡Valor no válido!.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.just_now">
            <summary>
              Looks up a localized string similar to En este momento.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.MessageDeleted">
            <summary>
              Looks up a localized string similar to Mensaje borrado.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Minutes">
            <summary>
              Looks up a localized string similar to Minutos.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Name">
            <summary>
              Looks up a localized string similar to Nombre de contacto.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.NewContact">
            <summary>
              Looks up a localized string similar to Nuevo contacto.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.NewMessage">
            <summary>
              Looks up a localized string similar to Ha recibido un mensaje nuevo.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Ok">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.OpenSource">
            <summary>
              Looks up a localized string similar to Fuente abierta.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Position">
            <summary>
              Looks up a localized string similar to Posición.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.PublicKey">
            <summary>
              Looks up a localized string similar to Llave pública.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Remove">
            <summary>
              Looks up a localized string similar to Eliminar.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.RestoreAccount">
            <summary>
              Looks up a localized string similar to Restaurar cuenta por frase de contraseña.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Save">
            <summary>
              Looks up a localized string similar to Ahorrar.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Search">
            <summary>
              Looks up a localized string similar to Buscar.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Send">
            <summary>
              Looks up a localized string similar to Enviar.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Share">
            <summary>
              Looks up a localized string similar to Cuota.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.ShowPassphrase">
            <summary>
              Looks up a localized string similar to Mostrar frase de contraseña.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.Social">
            <summary>
              Looks up a localized string similar to Social.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.StrictlyConfidentialMessage">
            <summary>
              Looks up a localized string similar to Mensaje estrictamente confidencial.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.TextMessage">
            <summary>
              Looks up a localized string similar to Mensaje de texto.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.TooManyParticipants">
            <summary>
              Looks up a localized string similar to Se han agregado demasiados participantes.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.VideoCall">
            <summary>
              Looks up a localized string similar to Videollamada.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_es.WrongPassphrase">
            <summary>
              Looks up a localized string similar to Frase de contraseña incorrecta.
            </summary>
        </member>
        <member name="T:EncryptedMessaging.Resources.Dictionary_fr">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.About">
            <summary>
              Looks up a localized string similar to Sur.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Add">
            <summary>
              Looks up a localized string similar to Ajouter.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Ago">
            <summary>
              Looks up a localized string similar to depuis.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Alert">
            <summary>
              Looks up a localized string similar to Alerte.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Audio">
            <summary>
              Looks up a localized string similar to l&apos;audio.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.AudioCall">
            <summary>
              Looks up a localized string similar to Appel audio.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Cancel">
            <summary>
              Looks up a localized string similar to Annuler.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Contact">
            <summary>
              Looks up a localized string similar to Contact.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Contacts">
            <summary>
              Looks up a localized string similar to Contacts.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.CreateAccount">
            <summary>
              Looks up a localized string similar to Créer un nouveau compte.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Data">
            <summary>
              Looks up a localized string similar to les données.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Day">
            <summary>
              Looks up a localized string similar to journée.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Days">
            <summary>
              Looks up a localized string similar to jours.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Delete">
            <summary>
              Looks up a localized string similar to Effacer.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Document">
            <summary>
              Looks up a localized string similar to Document.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Edit">
            <summary>
              Looks up a localized string similar to Éditer.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.EditPrivateKey">
            <summary>
              Looks up a localized string similar to Modifier la clé privée.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Exit">
            <summary>
              Looks up a localized string similar to Sortir.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.FunctionNotSupported">
            <summary>
              Looks up a localized string similar to Fonction non prise en charge.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Hour">
            <summary>
              Looks up a localized string similar to heure.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Hours">
            <summary>
              Looks up a localized string similar to les heures.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Image">
            <summary>
              Looks up a localized string similar to image.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Info">
            <summary>
              Looks up a localized string similar to Nous sommes anonymes. Nous sommes légion. Nous ne pardonnons pas. Nous n&apos;oublions pas. Attendez-nous!.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.InvalidKey">
            <summary>
              Looks up a localized string similar to Clé non valide !.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.InvalidPassphrase">
            <summary>
              Looks up a localized string similar to Mot de passe non valide.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.InvalidValue">
            <summary>
              Looks up a localized string similar to Valeur non valide !.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.just_now">
            <summary>
              Looks up a localized string similar to Juste maintenant.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.MessageDeleted">
            <summary>
              Looks up a localized string similar to Message supprimé.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Minutes">
            <summary>
              Looks up a localized string similar to Minutes.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Name">
            <summary>
              Looks up a localized string similar to Nom du contact.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.NewContact">
            <summary>
              Looks up a localized string similar to Nouveau contact.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.NewMessage">
            <summary>
              Looks up a localized string similar to Vous avez reçu un nouveau message.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Ok">
            <summary>
              Looks up a localized string similar to D&apos;accord.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.OpenSource">
            <summary>
              Looks up a localized string similar to Open source.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Position">
            <summary>
              Looks up a localized string similar to Position.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.PublicKey">
            <summary>
              Looks up a localized string similar to Clé publique.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Remove">
            <summary>
              Looks up a localized string similar to Supprimer.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.RestoreAccount">
            <summary>
              Looks up a localized string similar to Restaurer le compte par mot de passe.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Save">
            <summary>
              Looks up a localized string similar to Sauvegarder.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Search">
            <summary>
              Looks up a localized string similar to Chercher.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Send">
            <summary>
              Looks up a localized string similar to Envoyer.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Share">
            <summary>
              Looks up a localized string similar to Partager.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.ShowPassphrase">
            <summary>
              Looks up a localized string similar to Afficher la phrase secrète.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.Social">
            <summary>
              Looks up a localized string similar to Social.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.StrictlyConfidentialMessage">
            <summary>
              Looks up a localized string similar to Message strictement confidentiel.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.TextMessage">
            <summary>
              Looks up a localized string similar to Message texte.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.TooManyParticipants">
            <summary>
              Looks up a localized string similar to Trop de participants ont été ajoutés.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.VideoCall">
            <summary>
              Looks up a localized string similar to Appel vidéo.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_fr.WrongPassphrase">
            <summary>
              Looks up a localized string similar to Mot de passe incorrect.
            </summary>
        </member>
        <member name="T:EncryptedMessaging.Resources.Dictionary_it">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.About">
            <summary>
              Looks up a localized string similar to Di.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Add">
            <summary>
              Looks up a localized string similar to Aggiungere.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Ago">
            <summary>
              Looks up a localized string similar to fa.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Alert">
            <summary>
              Looks up a localized string similar to Mettere in guardia.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Audio">
            <summary>
              Looks up a localized string similar to audio.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.AudioCall">
            <summary>
              Looks up a localized string similar to Chiamata audio.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Cancel">
            <summary>
              Looks up a localized string similar to Annulla.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Contact">
            <summary>
              Looks up a localized string similar to Contatto.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Contacts">
            <summary>
              Looks up a localized string similar to Contatti.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.CreateAccount">
            <summary>
              Looks up a localized string similar to Crea un nuovo account.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Data">
            <summary>
              Looks up a localized string similar to dati.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Day">
            <summary>
              Looks up a localized string similar to giorno.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Days">
            <summary>
              Looks up a localized string similar to giorni.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Delete">
            <summary>
              Looks up a localized string similar to Elimina.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Document">
            <summary>
              Looks up a localized string similar to Documento.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Edit">
            <summary>
              Looks up a localized string similar to Modificare.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.EditPrivateKey">
            <summary>
              Looks up a localized string similar to Modifica chiave privata.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Exit">
            <summary>
              Looks up a localized string similar to Uscita.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.FunctionNotSupported">
            <summary>
              Looks up a localized string similar to Funzione non supportata.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Hour">
            <summary>
              Looks up a localized string similar to ora.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Hours">
            <summary>
              Looks up a localized string similar to ore.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Image">
            <summary>
              Looks up a localized string similar to immagine.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Info">
            <summary>
              Looks up a localized string similar to Siamo anonimi. Noi siamo una legione. Non perdoniamo. Non dimentichiamo. Aspettaci!.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.InvalidKey">
            <summary>
              Looks up a localized string similar to Chiave non valida!.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.InvalidPassphrase">
            <summary>
              Looks up a localized string similar to Passphrase non valida.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.InvalidValue">
            <summary>
              Looks up a localized string similar to Valore non valido!.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.just_now">
            <summary>
              Looks up a localized string similar to Proprio adesso.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.MessageDeleted">
            <summary>
              Looks up a localized string similar to Messaggio cancellato.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Minutes">
            <summary>
              Looks up a localized string similar to Minuti.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Name">
            <summary>
              Looks up a localized string similar to Nome del contatto.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.NewContact">
            <summary>
              Looks up a localized string similar to Nuovo contatto.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.NewMessage">
            <summary>
              Looks up a localized string similar to Hai ricevuto un nuovo messaggio.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Ok">
            <summary>
              Looks up a localized string similar to Ok.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.OpenSource">
            <summary>
              Looks up a localized string similar to Open source.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Position">
            <summary>
              Looks up a localized string similar to Posizione.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.PublicKey">
            <summary>
              Looks up a localized string similar to Chiave pubblica.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Remove">
            <summary>
              Looks up a localized string similar to Rimuovere.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.RestoreAccount">
            <summary>
              Looks up a localized string similar to Ripristina account tramite passphrase.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Save">
            <summary>
              Looks up a localized string similar to Salva.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Search">
            <summary>
              Looks up a localized string similar to Ricerca.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Send">
            <summary>
              Looks up a localized string similar to Spedire.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Share">
            <summary>
              Looks up a localized string similar to Condividere.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.ShowPassphrase">
            <summary>
              Looks up a localized string similar to Mostra passphrase.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.Social">
            <summary>
              Looks up a localized string similar to Sociale.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.StrictlyConfidentialMessage">
            <summary>
              Looks up a localized string similar to Messaggio strettamente confidenziale.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.TextMessage">
            <summary>
              Looks up a localized string similar to Messaggio testuale.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.TooManyParticipants">
            <summary>
              Looks up a localized string similar to Sono stati aggiunti troppi partecipanti.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.VideoCall">
            <summary>
              Looks up a localized string similar to Video chiamata.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Resources.Dictionary_it.WrongPassphrase">
            <summary>
              Looks up a localized string similar to Passphrase errata.
            </summary>
        </member>
        <member name="T:EncryptedMessaging.Setting">
            <summary>
            Configuration functions of setting message saving and deleting based on user input.
            </summary>
        </member>
        <member name="M:EncryptedMessaging.Setting.#ctor(EncryptedMessaging.Context)">
            <summary>
            Load the settigs of the chats.
            </summary>
            <param name="context">Context</param>
        </member>
        <member name="P:EncryptedMessaging.Setting.PostPersistenceDays">
            <summary>
            Number of days messages must be kept in memory before being automatically deleted
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Setting.KeepPost">
            <summary>
            Number of messages to be saved for each chat
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Setting.MessagePagination">
            <summary>
            Number of messages for each chat page: The chat is divided into pages to speed up the loading and not to weigh down the memory
            </summary>
        </member>
        <member name="T:EncryptedMessaging.Time">
            <summary>
            This class deals with time configuration related to the timestamps and sending and delivery of messages.
            </summary>
        </member>
        <member name="P:EncryptedMessaging.Time.CurrentTimeGMT">
            <summary>
            Set current time based on system timezone.
            </summary>
        </member>
    </members>
</doc>
